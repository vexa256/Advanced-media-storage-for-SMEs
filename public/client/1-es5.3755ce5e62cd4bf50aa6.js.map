{"version":3,"sources":["webpack:///src/app/uploading/track-upload-header/track-upload-header.component.html","webpack:///src/app/uploading/track-upload-header/track-upload-header.component.ts","webpack:///src/app/uploading/track-form/album-control/album-control.component.html","webpack:///src/app/uploading/track-form/album-control/album-control.component.ts","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.html","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.ts","webpack:///src/app/uploading/track-form/track-form.component.html","webpack:///src/app/uploading/track-form/track-form.component.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js","webpack:///src/common/core/utils/scroll-invalid-input-into-view.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","webpack:///src/app/web-player/audio-upload-validator.ts","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/accordion.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/expansion.js","webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-upload-validator.ts","webpack:///src/app/admin/tracks/crupdate-track-page/crupdate-track-page.component.ts","webpack:///src/app/admin/tracks/crupdate-track-page/crupdate-track-page.component.html","webpack:///src/common/uploads/directives/upload-button.directive.ts","webpack:///src/common/core/ui/chip-input/chip-input.component.ts","webpack:///src/common/core/ui/chip-input/chip-input.component.html","webpack:///src/common/guards/pending-changes/pending-changes-guard.service.ts","webpack:///src/app/admin/albums/crupdate-album-page/crupdate-album-page.component.ts","webpack:///src/app/admin/albums/crupdate-album-page/crupdate-album-page.component.html","webpack:///src/common/uploads/types/upload-uri.enum.ts","webpack:///src/common/core/ui/chip-input/chip-input.module.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttle.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttleTime.js","webpack:///src/common/shared/form-controls/upload-image-control/upload-image-control.component.ts","webpack:///src/common/shared/form-controls/upload-image-control/upload-image-control.component.html","webpack:///src/app/uploading/album-form/album-artist-control/album-artist-control.component.html","webpack:///src/app/uploading/album-form/album-artist-control/album-artist-control.component.ts","webpack:///src/app/uploading/album-form/album-form.component.html","webpack:///src/app/uploading/album-form/album-form.component.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.html","webpack:///src/app/uploading/uploading-host/uploading-host.component.ts","webpack:///src/app/uploading/uploading.module.ts","webpack:///src/app/uploading/uploading-routing.module.ts","webpack:///src/app/uploading/uploading-host/uploading-host.component.html","webpack:///src/common/uploads/utils/read-uploaded-folders.ts","webpack:///src/common/uploads/directives/upload-dropzone.directive.ts","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.html","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.ts","webpack:///src/app/uploading/upload-page/upload-page.component.html","webpack:///src/app/uploading/upload-page/upload-page.component.ts"],"names":["upload","TrackUploadHeaderComponent","cd","this","subscription","unsubscribe","progress$","pipe","throttleTime","animationFrame","a","leading","trailing","subscribe","progress","detectChanges","AlbumControlComponent","search","searchFormControl","loading$","BehaviorSubject","results$","selectedAlbum$","searchedOnce","bindToSearchControl","value","next","fn","propagateChange","valueChanges","debounceTime","distinctUntilChanged","switchMap","query","searchAlbums","catchError","of","albums","media","forceLocal","limit","modelTypes","finalize","map","response","results","clearSearchInput","album","setValue","provide","useExisting","multi","onMenuOpened","onMenuClosed","$event","stopPropagation","selectAlbum","TrackArtistControlComponent","searchUsers","searchControl","value$","bindSearchControl","artist","newArtists","filter","id","searchResults$","findMatches","artists","_","selectArtist","TrackFormComponent","fb","currentUser","tracks","toast","modal","audioValidator","uploadQueue","waveGenerator","router","settings","autoMatch","canceled","saved","errors$","defaultImage$","uniqueId","form","group","name","image","description","number","tags","genres","duration","url","youtube_id","spotify_popularity","local_only","waveData","expanded","suggestTagFn","tag","suggestGenreFn","genre","changes","currentValue","patchValue","albumForm","track","formValue","t","display_name","uploadQueueItem","uploadedResponse$","patchFormUsingFileUpload","get","customData","payload","length","artist_type","completed","getPayload","update","create","remove","open","markAsPristine","emit","errResponse","errors","show","title","body","ok","beforeClosed","confirmed","params","uri","validator","httpParams","diskPrefix","disk","willProcessFiles","types","audio","video","then","uploadedFiles","start","queueItem","find","queueItemId","generate","uploadedFile","finishProcessing","uploads$","markForCheck","values","metadata","fileEntry","comment","release_date","indexOf","trackUrl","bodyExpansion","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ctx_r0","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","super","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_autoActiveFirstOption","_keyManager","options","withWrap","change","index","toArray","_setVisibility","scrollTop","panel","nativeElement","_setVisibilityClasses","event","classList","c","split","reduce","className","trim","ɵfac","ɵcmp","type","selectors","contentQueries","dirIndex","_t","optionGroups","viewQuery","template","first","hostAttrs","inputs","disableRipple","panelWidth","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","directives","styles","encapsulation","changeDetection","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","asObservable","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","clickTarget","_isInsideShadowRoot","composedPath","target","formField","contains","overlayElement","Promise","resolve","_setTriggerValue","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","activeItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","activeItemIndex","labelCount","_setScrollTop","newScrollPosition","_getScrollTop","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","Error","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","_portal","_getOverlayConfig","keydownEvents","altKey","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","positions","belowPositions","originX","originY","overlayX","overlayY","abovePositions","panelClass","withPositions","connectedTo","elementRef","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","_a","defaultView","tabOut","_getOutsideClickStream","detachments","ɵdir","hostVars","hostBindings","_handleFocus","_handleInput","_handleKeydown","autocompleteDisabled","toString","MatAutocompleteModule","ɵmod","ɵinj","providers","imports","scrollInvalidInputIntoView","prefix","firstKey","Object","keys","node","document","getElementById","scrollIntoView","behavior","block","inline","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","MatSlideToggle","MatSlideToggleChange","checked","_MatSlideToggleMixinBase","_focusMonitor","tabIndex","_animationMode","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","toggleChange","parseInt","monitor","focusOrigin","_inputElement","stopMonitoring","_emitChangeEvent","focusVia","_thumbEl","_thumbBarEl","color","required","_onChangeEvent","_onInputClick","_onLabelTextChange","_r0","_r4","inputId","textContent","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","AudioUploadValidator","DEFAULT_MAX_SIZE_MB","showToast","validations","maxSize","getMaxFileSize","i18n","push","CdkAccordionModule","CdkAccordionItem","CdkAccordion","nextId","_stateChanges","Subject","_openCloseAllActions","_multi","_openCloseAll","nextId$1","accordion","_expansionDispatcher","_openCloseAllSubscription","Subscription","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","notify","useValue","MatExpansionPanel_ng_template_5_Template","MatExpansionPanelHeader_span_4_Template","_getExpandedState","MatExpansionPanelContent","MatExpansionModule","MatExpansionPanelTitle","MatExpansionPanelHeader","MatExpansionPanelActionRow","MatExpansionPanel","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","transform","height","visibility","_template","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","x","y","fromState","toState","hideToggle","displayMode","_lazyContent","startWith","take","_body","focusedElement","bodyElement","_togglePosition","togglePosition","_hasSpacing","data","animation","_parentChangeSubscription","accordionHideToggleChange","merge","_containsFocus","expandedHeight","collapsedHeight","toggle","isExpanded","_isExpanded","_toggle","_handleHeaderKeydown","origin","_handleHeaderFocus","_keydown","_getPanelId","_getHeaderHeight","_getTogglePosition","_showToggle","MatAccordion","arguments","_ownHeaders","_headers","headers","reset","header","notifyOnChanges","manager","setFirstItemActive","setLastItemActive","updateActiveItem","ɵMatAccordion_BaseFactory","AppearanceImageUploadValidator","CrupdateTrackPageComponent","route","api","insideAdmin","navigate","trackForm","dirty","includes","toTracksPage","UploadButtonDirective","el","config","filesSelected","e","files","ChipInputComponent","formControl","items$","suggestedValues$","suggestFn","items","splice","propagate","matAutocomplete","isOpen","add","duplicate","inputEl","item","addFromChipInput","addFromAutocomplete","PendingChangesGuard","component","canDeactivate","CrupdateAlbumPageComponent","toAlbumsPage","UploadUri","Image","ChipInputModule","defaultThrottleConfig","scheduler","lift","ThrottleTimeOperator","subscriber","destination","_hasTrailingValue","_trailingValue","throttled","schedule","dispatchNext","Subscriber","arg","clearThrottle","UploadImageControlComponent","imageValidator","uploadsApi","http","fileDeleted","buttonText","uploadInputConfig","multiple","src$","uploadConfig","defaultUploadConfig","paths","deleteForever","uploadImage","AlbumArtistControlComponent","artists$","selectedArtist$","searchArtists","users","AlbumFormComponent","uploadButtonConfig","hideArtistControl","confirmCancel","allTracks$","Date","toISOString","slice","trackByFn","i","onlyValidUploads","uploadsAdded$","uploads","g","error$","sortedTracks","previousIndex","currentIndex","trackForms","some","f","isUploading","artist_id","model_type","newTracks","submit","uploadFiles","maybeCancel","reorderTracks","UploadProgressBarComponent","hidden","totalProgress","count$","pending","UploadingHostComponent","UploadingModule","UploadingRoutingModule","routes","path","children","permissions","simplified","forChild","readDirRecursive","entry","entries","dir","createReader","readEntries","key","childEntry","isDirectory","transformFileEntry","file","fullPath","UploadDropzoneDirective","disableDropzoneClick","disableDropzone","filesDropped","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","clickButton","handleClick","removeClassesFromDropzone","emitUploadEvent","dropzoneDisabled","dataTransfer","dropEffect","newEl","elementFromPoint","clientX","clientY","Array","from","kind","webkitGetAsEntry","concat","hasFiles","toLowerCase","UploadedMediaPreviewComponent","urls","setTimeout","trackLinkInput","select","isTrack","routerLinkToUrl","mediaLink","network","mediaUrl","shareUsing","createAlbum$","UploadPageComponent","savedMedia$","autoCreateArtists","newMedia","uploadTracks"],"mappings":"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","file":"x","sourcesContent":["<div class=\"meta\">\n    <div class=\"name\">{{upload.uploadedFile.name}}</div>\n    <div class=\"time-left\" *ngIf=\"(progress.percentage && progress.percentage < 100) && !upload.error$.value\">\n        {{progress.eta}}\n        <span trans>left</span>\n    </div>\n    <div class=\"actions\">\n        <mat-icon\n                class=\"error-icon action-icon\"\n                svgIcon=\"error-outline\"\n                *ngIf=\"upload.error$ | async as error; else noError\"\n                [matTooltip]=\"error | trans\"\n                matTooltipPosition=\"left\"\n        ></mat-icon>\n        <ng-template #noError>\n            <span *ngIf=\"upload.completed\" trans>Upload complete.</span>\n            <span *ngIf=\"upload.processing$ | async\" trans>We are processing your track for playback…</span>\n            <span class=\"cancel-button\" *ngIf=\"!(upload.processing$ | async) && !upload.completed\" (click)=\"upload.cancel()\" trans>Cancel</span>\n        </ng-template>\n    </div>\n</div>\n<mat-progress-bar [mode]=\"(upload.processing$ | async) ? 'indeterminate' : 'determinate'\" color=\"accent\" [value]=\"progress.percentage\"></mat-progress-bar>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {UploadQueueItem, UploadQueueItemProgress} from '@common/uploads/upload-queue/upload-queue-item';\nimport {throttleTime} from 'rxjs/operators';\nimport {animationFrameScheduler, Subscription} from 'rxjs';\n\n@Component({\n    selector: 'track-upload-header',\n    templateUrl: './track-upload-header.component.html',\n    styleUrls: ['./track-upload-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TrackUploadHeaderComponent implements OnChanges, OnDestroy {\n    @Input() upload: UploadQueueItem;\n    private subscription: Subscription;\n    public progress: UploadQueueItemProgress;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n\n    ngOnChanges() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        this.subscription = this.upload.progress$.pipe(\n            // material progress bar animation lasts 250ms\n            throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}),\n        ).subscribe(progress => {\n            this.progress = progress;\n            this.cd.detectChanges();\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n","<div class=\"many-inputs\">\r\n    <div class=\"input-container\">\r\n        <div class=\"fake-label\" trans>Album</div>\r\n        <div class=\"fake-input\" tabindex=\"0\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\r\n            <ng-container *ngIf=\"selectedAlbum$ | async as selectedAlbum; else anyAlbum\">\r\n                <media-image [media]=\"selectedAlbum\"></media-image>\r\n                <div class=\"title-name\">{{selectedAlbum.name}}</div>\r\n            </ng-container>\r\n            <ng-template #anyAlbum>\r\n                <div class=\"title-name\" trans>None</div>\r\n            </ng-template>\r\n            <div class=\"arrow-container\">\r\n                <div class=\"arrow\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"add-album-control-menu\">\r\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"search-input-wrapper\">\r\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput mat-menu-item trans-placeholder>\r\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\r\n        </div>\r\n    </div>\r\n    <button mat-menu-item (click)=\"selectAlbum(null)\">\r\n        <media-image default=\"album\"></media-image>\r\n        <div class=\"info any-user-info\">\r\n            <div class=\"name\" trans>No Album</div>\r\n        </div>\r\n    </button>\r\n    <button mat-menu-item *ngFor=\"let album of results$ | async\" (click)=\"selectAlbum(album)\">\r\n        <media-image [media]=\"album\"></media-image>\r\n        <div class=\"user-info\">\r\n            <div class=\"name\">{{album.name}}</div>\r\n            <div class=\"email\">{{album?.artist?.name}}</div>\r\n        </div>\r\n    </button>\r\n    <button mat-menu-item disabled *ngIf=\"searchedOnce && !(results$ | async).length\" trans>No albums found.</button>\r\n</mat-menu>\r\n","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, map, switchMap} from 'rxjs/operators';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {Album, ALBUM_MODEL} from '../../../models/Album';\nimport {Search} from '../../../web-player/search/search.service';\n\n@Component({\n    selector: 'album-control',\n    templateUrl: './album-control.component.html',\n    styleUrls: ['./album-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AlbumControlComponent,\n        multi: true,\n    }]\n})\nexport class AlbumControlComponent implements ControlValueAccessor, OnInit {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public results$ = new BehaviorSubject<Album[]>([]);\n    public selectedAlbum$ = new BehaviorSubject<Album>(null);\n    private propagateChange: Function;\n    public searchedOnce = false;\n\n    constructor(\n        private search: Search,\n    ) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: Album) {\n        this.selectedAlbum$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchAlbums(query)),\n            catchError(() => of([])),\n        ).subscribe(albums => {\n            this.searchedOnce = true;\n            this.results$.next(albums);\n        });\n    }\n\n    private searchAlbums(query: string): Observable<Album[]> {\n        this.loading$.next(true);\n        return this.search.media(query, {forceLocal: true, limit: 7, modelTypes: [ALBUM_MODEL]})\n            .pipe(\n                finalize(() =>  this.loading$.next(false)),\n                map(response => response.results.albums),\n            );\n    }\n\n    public onMenuOpened() {\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectAlbum(album: Album) {\n        this.selectedAlbum$.next(album);\n        this.propagateChange(album);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<div class=\"input-container\">\n    <label [for]=\"id\" trans>Artists</label>\n    <input\n            type=\"text\"\n            [id]=\"id\"\n            [formControl]=\"searchControl\"\n            [matAutocomplete]=\"artistAuto\"\n            placeholder=\"Search artists and users...\"\n            trans-placeholder\n    >\n\n    <mat-chip-list [selectable]=\"false\">\n        <mat-chip class=\"chip-with-image\" *ngFor=\"let artist of value$ | async\" [removable]=\"true\" (removed)=\"deselectArtist(artist)\">\n            <img [src]=\"artist.image\" [alt]=\"artist.name\">\n            {{artist.name}}\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n    <mat-autocomplete #artistAuto=\"matAutocomplete\" class=\"media-autocomplete-panel\" (optionSelected)=\"selectArtist($event.option.value)\" [displayWith]=\"displayFn\">\n        <mat-option *ngFor=\"let artist of searchResults$ | async\" [value]=\"artist\">\n            <img [src]=\"artist.image\" [alt]=\"artist.name + ' image'\">\n            <span>{{artist.name}}</span>\n        </mat-option>\n    </mat-autocomplete>\n\n    <div class=\"error\" *ngIf=\"error\">{{error}}</div>\n</div>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of as observableOf} from 'rxjs';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {debounceTime, distinctUntilChanged, map, switchMap} from 'rxjs/operators';\nimport {Search} from '../../../web-player/search/search.service';\nimport {MixedArtist} from '../../../web-player/artists/mixed-artist';\nimport {ARTIST_MODEL} from '../../../models/Artist';\n\n@Component({\n    selector: 'track-artist-control',\n    templateUrl: './track-artist-control.component.html',\n    styleUrls: ['./track-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'custom-control'},\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: TrackArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class TrackArtistControlComponent implements OnInit, ControlValueAccessor {\n    @Input() error: string;\n    @Input() searchUsers = false;\n    @Input() id: string;\n\n    public searchControl = new FormControl();\n    public value$ = new BehaviorSubject<MixedArtist[]>([]);\n    public searchResults$: Observable<MixedArtist[]>;\n    private propagateChange: Function;\n\n    constructor(\n        private search: Search,\n    ) {}\n\n    ngOnInit() {\n        this.bindSearchControl();\n    }\n\n    public writeValue(value: MixedArtist[]) {\n        this.value$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public deselectArtist(artist: MixedArtist) {\n        const newArtists = this.value$.value.filter(a => a.id !== artist.id);\n        this.value$.next(newArtists);\n        this.propagateChange(this.value$.value);\n    }\n\n    public selectArtist(artist: MixedArtist) {\n        this.value$.next([...this.value$.value, artist]);\n        this.propagateChange(this.value$.value);\n    }\n\n    private bindSearchControl() {\n        this.searchResults$ = this.searchControl.valueChanges\n            .pipe(\n                distinctUntilChanged(),\n                debounceTime(250),\n                switchMap(query => this.findMatches(query))\n            );\n    }\n\n    public findMatches(query: string): Observable<MixedArtist[]> {\n        if ( ! query || typeof query !== 'string') {\n            return observableOf([]);\n        }\n\n        return this.search.media(query, {limit: 7, forceLocal: true, modelTypes: [ARTIST_MODEL]})\n            .pipe(map(response => response.results.artists));\n    }\n\n    public displayFn(_) {\n        return null;\n    }\n}\n","<form (ngSubmit)=\"submit()\" class=\"many-inputs\" [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <track-upload-header [upload]=\"uploadQueueItem\" *ngIf=\"uploadQueueItem\"></track-upload-header>\n    <div class=\"inline-form\" *ngIf=\"albumForm\" [formGroup]=\"form\">\n        <ng-content></ng-content>\n        <div class=\"input-container\">\n            <label [for]=\"'track-form-' + uniqueId + '-name'\" class=\"hidden\" trans>Title</label>\n            <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n        </div>\n        <div class=\"actions\">\n            <button type=\"button\" [class.active]=\"expanded\" mat-icon-button (click)=\"toggleExpandedState()\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" (click)=\"maybeCancel()\" mat-icon-button>\n                <mat-icon svgIcon=\"delete\"></mat-icon>\n            </button>\n        </div>\n    </div>\n    <div [@bodyExpansion]=\"getExpandedState()\" class=\"full-form\">\n        <div class=\"full-form-container\" [class.inside-album]=\"albumForm\">\n            <div class=\"left-column\">\n                <upload-image-control formControlName=\"image\" [defaultBackground]=\"defaultImage$ | async\" uploadType=\"track_image\"></upload-image-control>\n                <button mat-flat-button color=\"accent\" type=\"button\" class=\"left-column-action-button\" (click)=\"openUploadMusicModal()\">\n                    <span *ngIf=\"this.track\" trans>Replace File</span>\n                    <span *ngIf=\"!this.track\" trans>Upload Track</span>\n                </button>\n            </div>\n            <div class=\"many-inputs fields-container\">\n                <div class=\"input-container\" *ngIf=\"!albumForm\">\n                    <label [for]=\"'track-form-' + uniqueId + '-name'\" trans>Title</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n                    <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n                </div>\n\n                <album-control formControlName=\"album\" [id]=\"'track-form-' + uniqueId + '-album_id'\" *ngIf=\"!albumForm && (settings.get('player.artist_type') === 'artist' || insideAdmin())\"></album-control>\n                <track-artist-control [error]=\"errors.artists\" [id]=\"'track-form-' + uniqueId + '-artists'\" formControlName=\"artists\" *ngIf=\"settings.get('player.artist_type') === 'artist' || insideAdmin()\"></track-artist-control>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-duration'\" trans>Duration (ms)</label>\n                    <input type=\"number\" [id]=\"'track-form-' + uniqueId + '-duration'\" formControlName=\"duration\" min=\"1\" required>\n                    <div class=\"error\" *ngIf=\"errors.duration\">{{errors.duration}}</div>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-youtube-id'\" trans>Youtube Video ID</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-youtube-id'\" formControlName=\"youtube_id\" minlength=\"1\" maxlength=\"30\">\n                    <div class=\"error\" *ngIf=\"errors.youtube_id\">{{errors.youtube_id}}</div>\n                    <p>ID only. https://www.youtube.com/embed?v=<strong>EPyh41zPg4Z</strong></p>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-url'\" trans>Remote Track Url</label>\n                    <input type=\"url\" [id]=\"'track-form-' + uniqueId + '-track-url'\" formControlName=\"url\" minlength=\"1\" maxlength=\"191\">\n                    <div class=\"error\" *ngIf=\"errors.url\">{{errors.url}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-genres'\" trans>Genres</label>\n                    <chip-input placeholder=\"+Add genre\" [id]=\"'track-form-' + uniqueId + '-track-genres'\"[suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-tags'\" trans>Tags</label>\n                    <chip-input placeholder=\"+Add tag\" [id]=\"'track-form-' + uniqueId + '-track-tags'\" [suggestFn]=\"suggestTagFn\" formControlName=\"tags\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-description'\" trans>Description</label>\n                    <textarea type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-description'\" formControlName=\"description\" minlength=\"10\" maxlength=\"999\" rows=\"5\"></textarea>\n                </div>\n\n                <button type=\"submit\" mat-raised-button *ngIf=\"!albumForm\" color=\"accent\" [disabled]=\"(loading$ | async) || (uploadQueueItem && !uploadQueueItem.completed)\" trans>Save</button>\n                <button type=\"button\" mat-button (click)=\"maybeCancel()\" *ngIf=\"!albumForm && !track\" trans>Cancel</button>\n            </div>\n        </div>\n    </div>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {Track} from '../../models/Track';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {DefaultImagePaths} from '../../web-player/default-image-paths.enum';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {USER_MODEL} from '@common/core/types/models/User';\nimport {\n    matExpansionAnimations,\n    MatExpansionPanelState\n} from '@angular/material/expansion';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {finalize, map} from 'rxjs/operators';\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {Router} from '@angular/router';\nimport {UploadFileResponse} from '@common/uploads/uploads-api.service';\nimport {Album} from '../../models/Album';\nimport {MixedArtist} from '../../web-player/artists/mixed-artist';\nimport {Settings} from '@common/core/config/settings.service';\nimport {isAbsoluteUrl} from '@common/core/utils/is-absolute-url';\nimport {FileEntry} from '@common/uploads/types/file-entry';\nimport {randomString} from '@common/core/utils/random-string';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {Search} from '../../web-player/search/search.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\n\nexport interface ExtractedMetadata {\n    title?: string;\n    album?: Album;\n    album_name?: string;\n    artist?: MixedArtist;\n    artist_name?: string;\n    genres?: string[];\n    duration?: number;\n    release_date?: string;\n    comment?: string;\n    image?: FileEntry;\n}\n\nexport interface TrackUploadResponse extends UploadFileResponse {\n    metadata?: ExtractedMetadata;\n}\n\n@Component({\n    selector: 'track-form',\n    templateUrl: './track-form.component.html',\n    styleUrls: ['./track-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matExpansionAnimations.bodyExpansion]\n})\nexport class TrackFormComponent implements OnInit, OnChanges {\n    @Input() autoMatch = false;\n    // track that is being edited\n    @Input() track: Track;\n\n    // creating a new track for this upload\n    @Input() uploadQueueItem: UploadQueueItem;\n\n    // track will be saved along with this album\n    @Input() albumForm: FormGroup;\n\n    // number of this track inside parent album\n    @Input() number: number;\n\n    @Output() canceled = new EventEmitter<UploadQueueItem|Track>();\n    @Output() saved = new EventEmitter<Track>();\n\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<Track>]: string}>({});\n    public defaultImage$ = new BehaviorSubject<string>(DefaultImagePaths.album);\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public readonly uniqueId = randomString(5);\n\n    public form = this.fb.group({\n        id: [null],\n        name: [''],\n        image: [''],\n        description: [''],\n        number: [1],\n        tags: [[]],\n        genres: [[]],\n        duration: [null],\n        url: [''],\n        youtube_id: [''],\n        spotify_popularity: [''],\n        local_only: [true],\n        album: [null],\n        artists: [[]],\n        waveData: [null],\n    });\n    public expanded = false;\n\n    constructor(\n        private fb: FormBuilder,\n        private currentUser: CurrentUser,\n        private tracks: Tracks,\n        private toast: Toast,\n        private modal: Modal,\n        private audioValidator: AudioUploadValidator,\n        private uploadQueue: UploadQueueService,\n        private waveGenerator: WaveformGenerator,\n        private router: Router,\n        public settings: Settings,\n        private cd: ChangeDetectorRef,\n        private search: Search,\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.number && changes.number.currentValue != null) {\n            this.form.patchValue({number: changes.number.currentValue});\n        }\n    }\n\n    ngOnInit() {\n        this.expanded = !this.albumForm;\n\n        if (this.track) {\n            const formValue = {...this.track};\n            formValue.tags = (this.track.tags || []).map(t => t.name) as any;\n            formValue.genres = (this.track.genres || []).map(t => t.display_name || t.name) as any;\n            this.form.patchValue(formValue);\n\n            if (this.track.album) {\n                this.defaultImage$.next(this.track.album.image || DefaultImagePaths.album);\n            }\n        }\n\n        if (this.uploadQueueItem) {\n            this.uploadQueueItem.uploadedResponse$.subscribe((response: TrackUploadResponse) => {\n                this.patchFormUsingFileUpload(response);\n            });\n        }\n\n        if (this.albumForm) {\n            this.albumForm.get('image').valueChanges.subscribe(url => {\n                this.defaultImage$.next(url || DefaultImagePaths.album);\n            });\n        }\n    }\n\n    public getPayload(): Partial<Track> {\n        const customData = this.uploadQueueItem ? this.uploadQueueItem.customData : {};\n        const payload =  {...this.form.value, ...customData};\n        if ( ! payload.artists.length && this.settings.get('player.artist_type') === 'user') {\n            payload.artists = [{id: this.currentUser.get('id'), artist_type: USER_MODEL}];\n        }\n        return payload;\n    }\n\n    public isUploading() {\n        return this.uploadQueueItem && !this.uploadQueueItem.completed;\n    }\n\n    public submit() {\n        if (this.albumForm) return;\n        this.loading$.next(true);\n\n        const payload = this.getPayload();\n\n        const request = this.track ?\n            this.tracks.update(this.track.id, payload) :\n            this.tracks.create(payload);\n\n        request\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                if (this.uploadQueueItem) {\n                    this.uploadQueue.remove(this.uploadQueueItem.id);\n                }\n                this.toast.open('Track saved.');\n                this.form.markAsPristine();\n                this.saved.emit(response.track);\n            }, (errResponse: BackendErrorResponse) => {\n                this.errors$.next(errResponse.errors);\n                scrollInvalidInputIntoView(this.errors$.value, `track-form-${this.uniqueId}`);\n            });\n    }\n\n    public toggleExpandedState() {\n        this.expanded = !this.expanded;\n    }\n\n    public getExpandedState(): MatExpansionPanelState {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n\n    public maybeCancel() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Remove Track',\n            body:  'Are you sure you want to cancel the upload and remove this track?',\n            ok:    'Remove'\n        }).beforeClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            if (this.uploadQueueItem) {\n                this.uploadQueue.remove(this.uploadQueueItem.id);\n                this.canceled.emit(this.uploadQueueItem);\n                this.toast.open('Upload canceled.');\n            } else if (this.track) {\n                this.tracks.delete([this.track.id]).subscribe(() => {\n                    this.canceled.emit(this.track);\n                    this.toast.open('Track deleted.');\n                });\n            }\n        });\n    }\n\n    public openUploadMusicModal() {\n        const params = {\n            uri: 'uploads',\n            validator: this.audioValidator,\n            httpParams: {autoMatch: this.autoMatch, diskPrefix: 'track_media', disk: 'public'},\n            willProcessFiles: true,\n        } as UploadApiConfig;\n        openUploadWindow({types: [UploadInputTypes.audio, UploadInputTypes.video]}).then(uploadedFiles => {\n            if ( ! uploadedFiles) return;\n            // if this track form is already attached to existing upload queue item\n            // replace that item in queue service instead of creating a new item\n            const replacements = this.uploadQueueItem ? {[this.uploadQueueItem.id]: uploadedFiles[0]} : uploadedFiles;\n            this.uploadQueue.start(replacements, params).subscribe(response => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                this.waveGenerator.generate(queueItem.uploadedFile.native).then(waveData => {\n                    this.form.patchValue({waveData});\n                    queueItem.finishProcessing();\n                });\n                this.patchFormUsingFileUpload(response);\n                this.toast.open('Track uploaded.');\n            }, () => this.toast.open('Could not upload track'));\n            // make sure progress bar is shown if we're editing track from admin\n            if ( ! this.uploadQueueItem) {\n                this.uploadQueueItem = this.uploadQueue.uploads$.value[0];\n                this.cd.markForCheck();\n            }\n        });\n    }\n\n    private patchFormUsingFileUpload(response: TrackUploadResponse) {\n        const values: {[K in keyof Partial<Track>]: any} = {\n            name: response.metadata.title,\n            duration: response.metadata.duration,\n            url: response.fileEntry.url,\n            genres: response.metadata.genres || [],\n            description: response.metadata.comment,\n        };\n        if (response.metadata.album) {\n            values.album = response.metadata.album;\n        }\n        if (response.metadata.artist) {\n            values.artists = [response.metadata.artist];\n\n            // set artist on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.artist) {\n                this.albumForm.patchValue({artist: response.metadata.artist});\n            }\n        }\n        if (response.metadata.image) {\n            values.image = response.metadata.image.url;\n\n            // set image on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.image) {\n                this.albumForm.patchValue({image: response.metadata.image.url});\n            }\n        }\n        if (response.metadata.release_date && this.albumForm && !this.albumForm.value.release_date) {\n            this.albumForm.patchValue({release_date: response.metadata.release_date});\n        }\n        this.form.patchValue(values);\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.indexOf('admin') > -1;\n    }\n\n    public shouldShowDurationField() {\n        const trackUrl = this.form.get('url').value;\n        return !trackUrl || isAbsoluteUrl(trackUrl);\n    }\n\n    public suggestTagFn = (query: string) => {\n        return this.search.media(query, {modelTypes: ['App\\\\Tag'], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    }\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {modelTypes: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n}\n","import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nlet MatAutocomplete = /** @class */ (() => {\n    class MatAutocomplete extends _MatAutocompleteMixinBase {\n        constructor(_changeDetectorRef, _elementRef, defaults) {\n            super();\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n            this._activeOptionChanges = Subscription.EMPTY;\n            /** Whether the autocomplete panel should be visible, depending on option length. */\n            this.showPanel = false;\n            this._isOpen = false;\n            /** Function that maps an option's control value to its display value in the trigger. */\n            this.displayWith = null;\n            /** Event that is emitted whenever an option from the list is selected. */\n            this.optionSelected = new EventEmitter();\n            /** Event that is emitted when the autocomplete panel is opened. */\n            this.opened = new EventEmitter();\n            /** Event that is emitted when the autocomplete panel is closed. */\n            this.closed = new EventEmitter();\n            /** Emits whenever an option is activated using the keyboard. */\n            this.optionActivated = new EventEmitter();\n            this._classList = {};\n            /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n            this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n            this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n        }\n        /** Whether the autocomplete panel is open. */\n        get isOpen() { return this._isOpen && this.showPanel; }\n        /**\n         * Whether the first option should be highlighted when the autocomplete panel is opened.\n         * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n         */\n        get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n        set autoActiveFirstOption(value) {\n            this._autoActiveFirstOption = coerceBooleanProperty(value);\n        }\n        /**\n         * Takes classes set on the host mat-autocomplete element and applies them to the panel\n         * inside the overlay container to allow for easy styling.\n         */\n        set classList(value) {\n            if (value && value.length) {\n                this._classList = value.split(' ').reduce((classList, className) => {\n                    classList[className.trim()] = true;\n                    return classList;\n                }, {});\n            }\n            else {\n                this._classList = {};\n            }\n            this._setVisibilityClasses(this._classList);\n            this._elementRef.nativeElement.className = '';\n        }\n        ngAfterContentInit() {\n            this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n            this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            });\n            // Set the initial visibility state.\n            this._setVisibility();\n        }\n        ngOnDestroy() {\n            this._activeOptionChanges.unsubscribe();\n        }\n        /**\n         * Sets the panel scrollTop. This allows us to manually scroll to display options\n         * above or below the fold, as they are not actually being focused when active.\n         */\n        _setScrollTop(scrollTop) {\n            if (this.panel) {\n                this.panel.nativeElement.scrollTop = scrollTop;\n            }\n        }\n        /** Returns the panel's scrollTop. */\n        _getScrollTop() {\n            return this.panel ? this.panel.nativeElement.scrollTop : 0;\n        }\n        /** Panel should hide itself when the option list is empty. */\n        _setVisibility() {\n            this.showPanel = !!this.options.length;\n            this._setVisibilityClasses(this._classList);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Emits the `select` event. */\n        _emitSelectEvent(option) {\n            const event = new MatAutocompleteSelectedEvent(this, option);\n            this.optionSelected.emit(event);\n        }\n        /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n        _setVisibilityClasses(classList) {\n            classList['mat-autocomplete-visible'] = this.showPanel;\n            classList['mat-autocomplete-hidden'] = !this.showPanel;\n        }\n    }\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatAutocomplete.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n    ];\n    MatAutocomplete.propDecorators = {\n        template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n        panel: [{ type: ViewChild, args: ['panel',] }],\n        options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n        optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n        displayWith: [{ type: Input }],\n        autoActiveFirstOption: [{ type: Input }],\n        panelWidth: [{ type: Input }],\n        optionSelected: [{ type: Output }],\n        opened: [{ type: Output }],\n        closed: [{ type: Output }],\n        optionActivated: [{ type: Output }],\n        classList: [{ type: Input, args: ['class',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup, { descendants: true }]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\n    return MatAutocomplete;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nlet MatAutocompleteOrigin = /** @class */ (() => {\n    class MatAutocompleteOrigin {\n        constructor(\n        /** Reference to the element on which the directive is applied. */\n        elementRef) {\n            this.elementRef = elementRef;\n        }\n    }\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n    MatAutocompleteOrigin.ctorParameters = () => [\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n    return MatAutocompleteOrigin;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/** The height of each autocomplete option. */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** The total height of the autocomplete panel. */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nlet MatAutocompleteTrigger = /** @class */ (() => {\n    class MatAutocompleteTrigger {\n        constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n            this._element = _element;\n            this._overlay = _overlay;\n            this._viewContainerRef = _viewContainerRef;\n            this._zone = _zone;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._formField = _formField;\n            this._document = _document;\n            this._viewportRuler = _viewportRuler;\n            this._componentDestroyed = false;\n            this._autocompleteDisabled = false;\n            /** Whether or not the label state is being overridden. */\n            this._manuallyFloatingLabel = false;\n            /** Subscription to viewport size changes. */\n            this._viewportSubscription = Subscription.EMPTY;\n            /**\n             * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n             * closed autocomplete from being reopened if the user switches to another browser tab and then\n             * comes back.\n             */\n            this._canOpenOnNextFocus = true;\n            /** Stream of keyboard events that can close the panel. */\n            this._closeKeyEventStream = new Subject();\n            /**\n             * Event handler for when the window is blurred. Needs to be an\n             * arrow function in order to preserve the context.\n             */\n            this._windowBlurHandler = () => {\n                // If the user blurred the window while the autocomplete is focused, it means that it'll be\n                // refocused when they come back. In this case we want to skip the first focus event, if the\n                // pane was closed, in order to avoid reopening it unintentionally.\n                this._canOpenOnNextFocus =\n                    this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n            };\n            /** `View -> model callback called when value changes` */\n            this._onChange = () => { };\n            /** `View -> model callback called when autocomplete has been touched` */\n            this._onTouched = () => { };\n            /**\n             * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n             * will render the panel underneath the trigger if there is enough space for it to fit in\n             * the viewport, otherwise the panel will be shown above it. If the position is set to\n             * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n             * whether it fits completely in the viewport.\n             */\n            this.position = 'auto';\n            /**\n             * `autocomplete` attribute to be set on the input element.\n             * @docs-private\n             */\n            this.autocompleteAttribute = 'off';\n            this._overlayAttached = false;\n            /** Stream of autocomplete option selections. */\n            this.optionSelections = defer(() => {\n                if (this.autocomplete && this.autocomplete.options) {\n                    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n                }\n                // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n                // Return a stream that we'll replace with the real one once everything is in place.\n                return this._zone.onStable\n                    .asObservable()\n                    .pipe(take(1), switchMap(() => this.optionSelections));\n            });\n            this._scrollStrategy = scrollStrategy;\n        }\n        /**\n         * Whether the autocomplete is disabled. When disabled, the element will\n         * act as a regular input and the user won't be able to open the panel.\n         */\n        get autocompleteDisabled() { return this._autocompleteDisabled; }\n        set autocompleteDisabled(value) {\n            this._autocompleteDisabled = coerceBooleanProperty(value);\n        }\n        ngAfterViewInit() {\n            const window = this._getWindow();\n            if (typeof window !== 'undefined') {\n                this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n            }\n        }\n        ngOnChanges(changes) {\n            if (changes['position'] && this._positionStrategy) {\n                this._setStrategyPositions(this._positionStrategy);\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n            }\n        }\n        ngOnDestroy() {\n            const window = this._getWindow();\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('blur', this._windowBlurHandler);\n            }\n            this._viewportSubscription.unsubscribe();\n            this._componentDestroyed = true;\n            this._destroyPanel();\n            this._closeKeyEventStream.complete();\n        }\n        /** Whether or not the autocomplete panel is open. */\n        get panelOpen() {\n            return this._overlayAttached && this.autocomplete.showPanel;\n        }\n        /** Opens the autocomplete suggestion panel. */\n        openPanel() {\n            this._attachOverlay();\n            this._floatLabel();\n        }\n        /** Closes the autocomplete suggestion panel. */\n        closePanel() {\n            this._resetLabel();\n            if (!this._overlayAttached) {\n                return;\n            }\n            if (this.panelOpen) {\n                // Only emit if the panel was visible.\n                this.autocomplete.closed.emit();\n            }\n            this.autocomplete._isOpen = this._overlayAttached = false;\n            if (this._overlayRef && this._overlayRef.hasAttached()) {\n                this._overlayRef.detach();\n                this._closingActionsSubscription.unsubscribe();\n            }\n            // Note that in some cases this can end up being called after the component is destroyed.\n            // Add a check to ensure that we don't try to run change detection on a destroyed view.\n            if (!this._componentDestroyed) {\n                // We need to trigger change detection manually, because\n                // `fromEvent` doesn't seem to do it at the proper time.\n                // This ensures that the label is reset when the\n                // user clicks outside.\n                this._changeDetectorRef.detectChanges();\n            }\n        }\n        /**\n         * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n         * within the viewport.\n         */\n        updatePosition() {\n            if (this._overlayAttached) {\n                this._overlayRef.updatePosition();\n            }\n        }\n        /**\n         * A stream of actions that should close the autocomplete panel, including\n         * when an option is selected, on blur, and when TAB is pressed.\n         */\n        get panelClosingActions() {\n            return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n                this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n                of()).pipe(\n            // Normalize the output so we return a consistent type.\n            map(event => event instanceof MatOptionSelectionChange ? event : null));\n        }\n        /** The currently active option, coerced to MatOption type. */\n        get activeOption() {\n            if (this.autocomplete && this.autocomplete._keyManager) {\n                return this.autocomplete._keyManager.activeItem;\n            }\n            return null;\n        }\n        /** Stream of clicks outside of the autocomplete panel. */\n        _getOutsideClickStream() {\n            return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))\n                .pipe(filter(event => {\n                // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n                // fall back to check the first element in the path of the click event.\n                const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                    event.target);\n                const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n                return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n            }));\n        }\n        // Implemented as part of ControlValueAccessor.\n        writeValue(value) {\n            Promise.resolve(null).then(() => this._setTriggerValue(value));\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnChange(fn) {\n            this._onChange = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        setDisabledState(isDisabled) {\n            this._element.nativeElement.disabled = isDisabled;\n        }\n        _handleKeydown(event) {\n            const keyCode = event.keyCode;\n            // Prevent the default action on all escape key presses. This is here primarily to bring IE\n            // in line with other browsers. By default, pressing escape on IE will cause it to revert\n            // the input value to the one that it had on focus, however it won't dispatch any events\n            // which means that the model value will be out of sync with the view.\n            if (keyCode === ESCAPE) {\n                event.preventDefault();\n            }\n            if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n                this.activeOption._selectViaInteraction();\n                this._resetActiveItem();\n                event.preventDefault();\n            }\n            else if (this.autocomplete) {\n                const prevActiveItem = this.autocomplete._keyManager.activeItem;\n                const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n                if (this.panelOpen || keyCode === TAB) {\n                    this.autocomplete._keyManager.onKeydown(event);\n                }\n                else if (isArrowKey && this._canOpen()) {\n                    this.openPanel();\n                }\n                if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                    this._scrollToOption();\n                }\n            }\n        }\n        _handleInput(event) {\n            let target = event.target;\n            let value = target.value;\n            // Based on `NumberValueAccessor` from forms.\n            if (target.type === 'number') {\n                value = value == '' ? null : parseFloat(value);\n            }\n            // If the input has a placeholder, IE will fire the `input` event on page load,\n            // focus and blur, in addition to when the user actually changed the value. To\n            // filter out all of the extra events, we save the value on focus and between\n            // `input` events, and we check whether it changed.\n            // See: https://connect.microsoft.com/IE/feedback/details/885747/\n            if (this._previousValue !== value) {\n                this._previousValue = value;\n                this._onChange(value);\n                if (this._canOpen() && this._document.activeElement === event.target) {\n                    this.openPanel();\n                }\n            }\n        }\n        _handleFocus() {\n            if (!this._canOpenOnNextFocus) {\n                this._canOpenOnNextFocus = true;\n            }\n            else if (this._canOpen()) {\n                this._previousValue = this._element.nativeElement.value;\n                this._attachOverlay();\n                this._floatLabel(true);\n            }\n        }\n        /**\n         * In \"auto\" mode, the label will animate down as soon as focus is lost.\n         * This causes the value to jump when selecting an option with the mouse.\n         * This method manually floats the label until the panel can be closed.\n         * @param shouldAnimate Whether the label should be animated when it is floated.\n         */\n        _floatLabel(shouldAnimate = false) {\n            if (this._formField && this._formField.floatLabel === 'auto') {\n                if (shouldAnimate) {\n                    this._formField._animateAndLockLabel();\n                }\n                else {\n                    this._formField.floatLabel = 'always';\n                }\n                this._manuallyFloatingLabel = true;\n            }\n        }\n        /** If the label has been manually elevated, return it to its normal state. */\n        _resetLabel() {\n            if (this._manuallyFloatingLabel) {\n                this._formField.floatLabel = 'auto';\n                this._manuallyFloatingLabel = false;\n            }\n        }\n        /**\n         * Given that we are not actually focusing active options, we must manually adjust scroll\n         * to reveal options below the fold. First, we find the offset of the option from the top\n         * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n         * the panel height + the option height, so the active option will be just visible at the\n         * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n         * will become the offset. If that offset is visible within the panel already, the scrollTop is\n         * not adjusted.\n         */\n        _scrollToOption() {\n            const index = this.autocomplete._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                this.autocomplete._setScrollTop(0);\n            }\n            else {\n                const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n                this.autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n        /**\n         * This method listens to a stream of panel closing actions and resets the\n         * stream every time the option list changes.\n         */\n        _subscribeToClosingActions() {\n            const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n            const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n            // Defer emitting to the stream until the next tick, because changing\n            // bindings in here will cause \"changed after checked\" errors.\n            delay(0));\n            // When the zone is stable initially, and when the option list changes...\n            return merge(firstStable, optionChanges)\n                .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this.autocomplete._setVisibility();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                    // event, because we may not have emitted it when the panel was attached. This\n                    // can happen if the users opens the panel and there are no options, but the\n                    // options come in slightly later or as a result of the value changing.\n                    if (wasOpen !== this.panelOpen) {\n                        this.autocomplete.opened.emit();\n                    }\n                }\n                return this.panelClosingActions;\n            }), \n            // when the first closing event occurs...\n            take(1))\n                // set the value, close the panel, and complete.\n                .subscribe(event => this._setValueAndClose(event));\n        }\n        /** Destroys the autocomplete suggestion panel. */\n        _destroyPanel() {\n            if (this._overlayRef) {\n                this.closePanel();\n                this._overlayRef.dispose();\n                this._overlayRef = null;\n            }\n        }\n        _setTriggerValue(value) {\n            const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n                this.autocomplete.displayWith(value) :\n                value;\n            // Simply falling back to an empty string if the display value is falsy does not work properly.\n            // The display value can also be the number zero and shouldn't fall back to an empty string.\n            const inputValue = toDisplay != null ? toDisplay : '';\n            // If it's used within a `MatFormField`, we should set it through the property so it can go\n            // through change detection.\n            if (this._formField) {\n                this._formField._control.value = inputValue;\n            }\n            else {\n                this._element.nativeElement.value = inputValue;\n            }\n            this._previousValue = inputValue;\n        }\n        /**\n         * This method closes the panel, and if a value is specified, also sets the associated\n         * control to that value. It will also mark the control as dirty if this interaction\n         * stemmed from the user.\n         */\n        _setValueAndClose(event) {\n            if (event && event.source) {\n                this._clearPreviousSelectedOption(event.source);\n                this._setTriggerValue(event.source.value);\n                this._onChange(event.source.value);\n                this._element.nativeElement.focus();\n                this.autocomplete._emitSelectEvent(event.source);\n            }\n            this.closePanel();\n        }\n        /**\n         * Clear any previous selected option and emit a selection change event for this option\n         */\n        _clearPreviousSelectedOption(skip) {\n            this.autocomplete.options.forEach(option => {\n                if (option != skip && option.selected) {\n                    option.deselect();\n                }\n            });\n        }\n        _attachOverlay() {\n            if (!this.autocomplete) {\n                throw getMatAutocompleteMissingPanelError();\n            }\n            // We want to resolve this once, as late as possible so that we can be\n            // sure that the element has been moved into its final place in the DOM.\n            if (this._isInsideShadowRoot == null) {\n                this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n            }\n            let overlayRef = this._overlayRef;\n            if (!overlayRef) {\n                this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n                overlayRef = this._overlay.create(this._getOverlayConfig());\n                this._overlayRef = overlayRef;\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                overlayRef.keydownEvents().subscribe(event => {\n                    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                    if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                        this._resetActiveItem();\n                        this._closeKeyEventStream.next();\n                        // We need to stop propagation, otherwise the event will eventually\n                        // reach the input itself and cause the overlay to be reopened.\n                        event.stopPropagation();\n                        event.preventDefault();\n                    }\n                });\n                this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                });\n            }\n            else {\n                // Update the trigger, panel width and direction, in case anything has changed.\n                this._positionStrategy.setOrigin(this._getConnectedElement());\n                overlayRef.updateSize({ width: this._getPanelWidth() });\n            }\n            if (overlayRef && !overlayRef.hasAttached()) {\n                overlayRef.attach(this._portal);\n                this._closingActionsSubscription = this._subscribeToClosingActions();\n            }\n            const wasOpen = this.panelOpen;\n            this.autocomplete._setVisibility();\n            this.autocomplete._isOpen = this._overlayAttached = true;\n            // We need to do an extra `panelOpen` check in here, because the\n            // autocomplete won't be shown if there are no options.\n            if (this.panelOpen && wasOpen !== this.panelOpen) {\n                this.autocomplete.opened.emit();\n            }\n        }\n        _getOverlayConfig() {\n            return new OverlayConfig({\n                positionStrategy: this._getOverlayPosition(),\n                scrollStrategy: this._scrollStrategy(),\n                width: this._getPanelWidth(),\n                direction: this._dir\n            });\n        }\n        _getOverlayPosition() {\n            const strategy = this._overlay.position()\n                .flexibleConnectedTo(this._getConnectedElement())\n                .withFlexibleDimensions(false)\n                .withPush(false);\n            this._setStrategyPositions(strategy);\n            this._positionStrategy = strategy;\n            return strategy;\n        }\n        /** Sets the positions on a position strategy based on the directive's input state. */\n        _setStrategyPositions(positionStrategy) {\n            // Note that we provide horizontal fallback positions, even though by default the dropdown\n            // width matches the input, because consumers can override the width. See #18854.\n            const belowPositions = [\n                { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n                { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n            ];\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            const panelClass = 'mat-autocomplete-panel-above';\n            const abovePositions = [\n                { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n                { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n            ];\n            let positions;\n            if (this.position === 'above') {\n                positions = abovePositions;\n            }\n            else if (this.position === 'below') {\n                positions = belowPositions;\n            }\n            else {\n                positions = [...belowPositions, ...abovePositions];\n            }\n            positionStrategy.withPositions(positions);\n        }\n        _getConnectedElement() {\n            if (this.connectedTo) {\n                return this.connectedTo.elementRef;\n            }\n            return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n        }\n        _getPanelWidth() {\n            return this.autocomplete.panelWidth || this._getHostWidth();\n        }\n        /** Returns the width of the input element, so the panel width can match it. */\n        _getHostWidth() {\n            return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n        }\n        /**\n         * Resets the active item to -1 so arrow events will activate the\n         * correct options, or to 0 if the consumer opted into it.\n         */\n        _resetActiveItem() {\n            this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n        }\n        /** Determines whether the panel can be opened. */\n        _canOpen() {\n            const element = this._element.nativeElement;\n            return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            var _a;\n            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n        }\n    }\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\n    MatAutocompleteTrigger.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Overlay },\n        { type: ViewContainerRef },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: ViewportRuler }\n    ];\n    MatAutocompleteTrigger.propDecorators = {\n        autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n        position: [{ type: Input, args: ['matAutocompletePosition',] }],\n        connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n        autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n        autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc4.ViewportRuler }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\n    return MatAutocompleteTrigger;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatAutocompleteModule = /** @class */ (() => {\n    class MatAutocompleteModule {\n    }\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [CdkScrollableModule, MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    CdkScrollableModule,\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatAutocompleteModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map","export function scrollInvalidInputIntoView(errors: {[key: string]: any}, prefix = '') {\r\n    let firstKey = Object.keys(errors)[0];\r\n    if (firstKey) {\r\n        if (prefix) {\r\n            firstKey = `${prefix}-${firstKey}`;\r\n        }\r\n        const node = document.getElementById(firstKey);\r\n        if (node) {\r\n            node.scrollIntoView({behavior: 'smooth', block: 'center', inline: 'center'});\r\n        }\r\n    }\r\n}\r\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nlet MatSlideToggle = /** @class */ (() => {\n    class MatSlideToggle extends _MatSlideToggleMixinBase {\n        constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n            super(elementRef);\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this.defaults = defaults;\n            this._animationMode = _animationMode;\n            this._onChange = (_) => { };\n            this._onTouched = () => { };\n            this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n            this._required = false;\n            this._checked = false;\n            /** Name value will be applied to the input element if present. */\n            this.name = null;\n            /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n            this.id = this._uniqueId;\n            /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n            this.labelPosition = 'after';\n            /** Used to set the aria-label attribute on the underlying input element. */\n            this.ariaLabel = null;\n            /** Used to set the aria-labelledby attribute on the underlying input element. */\n            this.ariaLabelledby = null;\n            /** An event will be dispatched each time the slide-toggle changes its value. */\n            this.change = new EventEmitter();\n            /**\n             * An event will be dispatched each time the slide-toggle input is toggled.\n             * This event is always emitted when the user toggles the slide toggle, but this does not mean\n             * the slide toggle's value has changed.\n             */\n            this.toggleChange = new EventEmitter();\n            this.tabIndex = parseInt(tabIndex) || 0;\n        }\n        /** Whether the slide-toggle is required. */\n        get required() { return this._required; }\n        set required(value) { this._required = coerceBooleanProperty(value); }\n        /** Whether the slide-toggle element is checked or not. */\n        get checked() { return this._checked; }\n        set checked(value) {\n            this._checked = coerceBooleanProperty(value);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Returns the unique id for the visual hidden input. */\n        get inputId() { return `${this.id || this._uniqueId}-input`; }\n        ngAfterContentInit() {\n            this._focusMonitor\n                .monitor(this._elementRef, true)\n                .subscribe(focusOrigin => {\n                // Only forward focus manually when it was received programmatically or through the\n                // keyboard. We should not do this for mouse/touch focus for two reasons:\n                // 1. It can prevent clicks from landing in Chrome (see #18269).\n                // 2. They're already handled by the wrapping `label` element.\n                if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                    this._inputElement.nativeElement.focus();\n                }\n                else if (!focusOrigin) {\n                    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                    // Angular does not expect events to be raised during change detection, so any state\n                    // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                    // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                    // we defer telling the form control it has been touched until the next tick.\n                    Promise.resolve().then(() => this._onTouched());\n                }\n            });\n        }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        /** Method being called whenever the underlying input emits a change event. */\n        _onChangeEvent(event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the component's `change` output.\n            event.stopPropagation();\n            this.toggleChange.emit();\n            // When the slide toggle's config disables toggle change event by setting\n            // `disableToggleValue: true`, the slide toggle's value does not change, and the\n            // checked state of the underlying input needs to be changed back.\n            if (this.defaults.disableToggleValue) {\n                this._inputElement.nativeElement.checked = this.checked;\n                return;\n            }\n            // Sync the value from the underlying input element with the component instance.\n            this.checked = this._inputElement.nativeElement.checked;\n            // Emit our custom change event only if the underlying input emitted one. This ensures that\n            // there is no change event, when the checked state changes programmatically.\n            this._emitChangeEvent();\n        }\n        /** Method being called whenever the slide-toggle has been clicked. */\n        _onInputClick(event) {\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `slide-toggle` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        writeValue(value) {\n            this.checked = !!value;\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        registerOnChange(fn) {\n            this._onChange = fn;\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        /** Implemented as a part of ControlValueAccessor. */\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Focuses the slide-toggle. */\n        focus(options) {\n            this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n        }\n        /** Toggles the checked state of the slide-toggle. */\n        toggle() {\n            this.checked = !this.checked;\n            this._onChange(this.checked);\n        }\n        /**\n         * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n         */\n        _emitChangeEvent() {\n            this._onChange(this.checked);\n            this.change.emit(new MatSlideToggleChange(this, this.checked));\n        }\n        /** Method being called whenever the label text changes. */\n        _onLabelTextChange() {\n            // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n            // slide-toggle component will be only marked for check, but no actual change detection runs\n            // automatically. Instead of going back into the zone in order to trigger a change detection\n            // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n            // we only trigger an explicit change detection for the slide-toggle view and its children.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatSlideToggle.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatSlideToggle.propDecorators = {\n        _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n        _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n        name: [{ type: Input }],\n        id: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        required: [{ type: Input }],\n        checked: [{ type: Input }],\n        change: [{ type: Output }],\n        toggleChange: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n    return MatSlideToggle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nlet MatSlideToggleRequiredValidator = /** @class */ (() => {\n    class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n    }\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n    return MatSlideToggleRequiredValidator;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nlet _MatSlideToggleRequiredValidatorModule = /** @class */ (() => {\n    class _MatSlideToggleRequiredValidatorModule {\n    }\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n    return _MatSlideToggleRequiredValidatorModule;\n})();\nlet MatSlideToggleModule = /** @class */ (() => {\n    class MatSlideToggleModule {\n    }\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n    return MatSlideToggleModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import {Injectable} from '@angular/core';\r\nimport {UploadValidator} from '@common/uploads/validation/upload-validator';\r\nimport {FileSizeValidation} from '@common/uploads/validation/validations/file-size-validation';\r\nimport {convertToBytes} from '@common/core/utils/convertToBytes';\r\nimport {FileTypeValidation} from '@common/uploads/validation/validations/file-type-validation';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AudioUploadValidator extends UploadValidator {\r\n    protected readonly DEFAULT_MAX_SIZE_MB = 50;\r\n    public showToast = true;\r\n\r\n    protected initValidations() {\r\n        const validations = [\r\n            new FileSizeValidation(\r\n                {maxSize: this.getMaxFileSize()},\r\n                this.i18n\r\n            ),\r\n            new FileTypeValidation({types: ['audio', 'video']}, this.i18n),\r\n        ];\r\n\r\n        this.validations.push(...validations);\r\n    }\r\n\r\n    protected getMaxFileSize(): number {\r\n        return this.settings.get(\r\n            'uploads.max_size',\r\n            convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')\r\n        );\r\n    }\r\n}\r\n","import { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nlet CdkAccordion = /** @class */ (() => {\n    class CdkAccordion {\n        constructor() {\n            /** Emits when the state of the accordion changes */\n            this._stateChanges = new Subject();\n            /** Stream that emits true/false when openAll/closeAll is triggered. */\n            this._openCloseAllActions = new Subject();\n            /** A readonly id value to use for unique selection coordination. */\n            this.id = `cdk-accordion-${nextId++}`;\n            this._multi = false;\n        }\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        get multi() { return this._multi; }\n        set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n        /** Opens all enabled accordion items in an accordion where multi is enabled. */\n        openAll() {\n            this._openCloseAll(true);\n        }\n        /** Closes all enabled accordion items in an accordion where multi is enabled. */\n        closeAll() {\n            this._openCloseAll(false);\n        }\n        ngOnChanges(changes) {\n            this._stateChanges.next(changes);\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n        _openCloseAll(expanded) {\n            if (this.multi) {\n                this._openCloseAllActions.next(expanded);\n            }\n        }\n    }\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkAccordion.propDecorators = {\n        multi: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion'\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n    return CdkAccordion;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nlet CdkAccordionItem = /** @class */ (() => {\n    class CdkAccordionItem {\n        constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n            this.accordion = accordion;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._expansionDispatcher = _expansionDispatcher;\n            /** Subscription to openAll/closeAll events. */\n            this._openCloseAllSubscription = Subscription.EMPTY;\n            /** Event emitted every time the AccordionItem is closed. */\n            this.closed = new EventEmitter();\n            /** Event emitted every time the AccordionItem is opened. */\n            this.opened = new EventEmitter();\n            /** Event emitted when the AccordionItem is destroyed. */\n            this.destroyed = new EventEmitter();\n            /**\n             * Emits whenever the expanded state of the accordion changes.\n             * Primarily used to facilitate two-way binding.\n             * @docs-private\n             */\n            this.expandedChange = new EventEmitter();\n            /** The unique AccordionItem id. */\n            this.id = `cdk-accordion-child-${nextId$1++}`;\n            this._expanded = false;\n            this._disabled = false;\n            /** Unregister function for _expansionDispatcher. */\n            this._removeUniqueSelectionListener = () => { };\n            this._removeUniqueSelectionListener =\n                _expansionDispatcher.listen((id, accordionId) => {\n                    if (this.accordion && !this.accordion.multi &&\n                        this.accordion.id === accordionId && this.id !== id) {\n                        this.expanded = false;\n                    }\n                });\n            // When an accordion item is hosted in an accordion, subscribe to open/close events.\n            if (this.accordion) {\n                this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n            }\n        }\n        /** Whether the AccordionItem is expanded. */\n        get expanded() { return this._expanded; }\n        set expanded(expanded) {\n            expanded = coerceBooleanProperty(expanded);\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                this.expandedChange.emit(expanded);\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                     */\n                    const accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /** Whether the AccordionItem is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n        /** Emits an event for the accordion item being destroyed. */\n        ngOnDestroy() {\n            this.opened.complete();\n            this.closed.complete();\n            this.destroyed.emit();\n            this.destroyed.complete();\n            this._removeUniqueSelectionListener();\n            this._openCloseAllSubscription.unsubscribe();\n        }\n        /** Toggles the expanded state of the accordion item. */\n        toggle() {\n            if (!this.disabled) {\n                this.expanded = !this.expanded;\n            }\n        }\n        /** Sets the expanded state of the accordion item to false. */\n        close() {\n            if (!this.disabled) {\n                this.expanded = false;\n            }\n        }\n        /** Sets the expanded state of the accordion item to true. */\n        open() {\n            if (!this.disabled) {\n                this.expanded = true;\n            }\n        }\n        _subscribeToOpenCloseAllActions() {\n            return this.accordion._openCloseAllActions.subscribe(expanded => {\n                // Only change expanded state if item is enabled\n                if (!this.disabled) {\n                    this.expanded = expanded;\n                }\n            });\n        }\n    }\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n            // to the same accordion.\n            { provide: CdkAccordion, useValue: ɵ0 },\n        ])] });\n    CdkAccordionItem.ctorParameters = () => [\n        { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher }\n    ];\n    CdkAccordionItem.propDecorators = {\n        closed: [{ type: Output }],\n        opened: [{ type: Output }],\n        destroyed: [{ type: Output }],\n        expandedChange: [{ type: Output }],\n        expanded: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n    return CdkAccordionItem;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet CdkAccordionModule = /** @class */ (() => {\n    class CdkAccordionModule {\n    }\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n    return CdkAccordionModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n\n//# sourceMappingURL=accordion.js.map","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, hasModifierKey, SPACE, HOME, END } from '@angular/cdk/keycodes';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\n\nconst _c0 = [\"body\"];\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) { }\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n} }\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nlet MatExpansionPanelContent = /** @class */ (() => {\n    class MatExpansionPanelContent {\n        constructor(_template) {\n            this._template = _template;\n        }\n    }\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) { return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatExpansionPanelContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelContent, selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]] });\n    MatExpansionPanelContent.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return MatExpansionPanelContent;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nlet MatExpansionPanel = /** @class */ (() => {\n    class MatExpansionPanel extends CdkAccordionItem {\n        constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n            super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n            this._viewContainerRef = _viewContainerRef;\n            this._animationMode = _animationMode;\n            this._hideToggle = false;\n            /** An event emitted after the body's expansion animation happens. */\n            this.afterExpand = new EventEmitter();\n            /** An event emitted after the body's collapse animation happens. */\n            this.afterCollapse = new EventEmitter();\n            /** Stream that emits for changes in `@Input` properties. */\n            this._inputChanges = new Subject();\n            /** ID for the associated header element. Used for a11y labelling. */\n            this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n            /** Stream of body animation done events. */\n            this._bodyAnimationDone = new Subject();\n            this.accordion = accordion;\n            this._document = _document;\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(event => {\n                if (event.fromState !== 'void') {\n                    if (event.toState === 'expanded') {\n                        this.afterExpand.emit();\n                    }\n                    else if (event.toState === 'collapsed') {\n                        this.afterCollapse.emit();\n                    }\n                }\n            });\n            if (defaultOptions) {\n                this.hideToggle = defaultOptions.hideToggle;\n            }\n        }\n        /** Whether the toggle indicator should be hidden. */\n        get hideToggle() {\n            return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n        }\n        set hideToggle(value) {\n            this._hideToggle = coerceBooleanProperty(value);\n        }\n        /** The position of the expansion indicator. */\n        get togglePosition() {\n            return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n        }\n        set togglePosition(value) {\n            this._togglePosition = value;\n        }\n        /** Determines whether the expansion panel should have spacing between it and its siblings. */\n        _hasSpacing() {\n            if (this.accordion) {\n                return this.expanded && this.accordion.displayMode === 'default';\n            }\n            return false;\n        }\n        /** Gets the expanded state string. */\n        _getExpandedState() {\n            return this.expanded ? 'expanded' : 'collapsed';\n        }\n        /** Toggles the expanded state of the expansion panel. */\n        toggle() {\n            this.expanded = !this.expanded;\n        }\n        /** Sets the expanded state of the expansion panel to false. */\n        close() {\n            this.expanded = false;\n        }\n        /** Sets the expanded state of the expansion panel to true. */\n        open() {\n            this.expanded = true;\n        }\n        ngAfterContentInit() {\n            if (this._lazyContent) {\n                // Render the content as soon as the panel becomes open.\n                this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n                    this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n                });\n            }\n        }\n        ngOnChanges(changes) {\n            this._inputChanges.next(changes);\n        }\n        ngOnDestroy() {\n            super.ngOnDestroy();\n            this._bodyAnimationDone.complete();\n            this._inputChanges.complete();\n        }\n        /** Checks whether the expansion panel's content contains the currently-focused element. */\n        _containsFocus() {\n            if (this._body) {\n                const focusedElement = this._document.activeElement;\n                const bodyElement = this._body.nativeElement;\n                return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n            }\n            return false;\n        }\n    }\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) { return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\nMatExpansionPanel.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanel, selectors: [[\"mat-expansion-panel\"]], contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    } }, viewQuery: function MatExpansionPanel_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    } }, hostAttrs: [1, \"mat-expansion-panel\"], hostVars: 6, hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    } }, inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, exportAs: [\"matExpansionPanel\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: ɵ0 },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]], template: function MatExpansionPanel_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimationDone.next($event); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matExpansionAnimations.bodyExpansion] }, changeDetection: 0 });\n    MatExpansionPanel.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n    ];\n    MatExpansionPanel.propDecorators = {\n        hideToggle: [{ type: Input }],\n        togglePosition: [{ type: Input }],\n        afterExpand: [{ type: Output }],\n        afterCollapse: [{ type: Output }],\n        _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n        _body: [{ type: ViewChild, args: ['body',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n                },\n                styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [MAT_ACCORDION]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, { afterExpand: [{\n            type: Output\n        }], afterCollapse: [{\n            type: Output\n        }], hideToggle: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], _lazyContent: [{\n            type: ContentChild,\n            args: [MatExpansionPanelContent]\n        }], _body: [{\n            type: ViewChild,\n            args: ['body']\n        }] }); })();\n    return MatExpansionPanel;\n})();\nlet MatExpansionPanelActionRow = /** @class */ (() => {\n    class MatExpansionPanelActionRow {\n    }\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) { return new (t || MatExpansionPanelActionRow)(); };\nMatExpansionPanelActionRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelActionRow, selectors: [[\"mat-action-row\"]], hostAttrs: [1, \"mat-action-row\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            }]\n    }], null, null); })();\n    return MatExpansionPanelActionRow;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nlet MatExpansionPanelHeader = /** @class */ (() => {\n    class MatExpansionPanelHeader {\n        constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode) {\n            this.panel = panel;\n            this._element = _element;\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._animationMode = _animationMode;\n            this._parentChangeSubscription = Subscription.EMPTY;\n            const accordionHideToggleChange = panel.accordion ?\n                panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n                EMPTY;\n            // Since the toggle state depends on an @Input on the panel, we\n            // need to subscribe and trigger change detection manually.\n            this._parentChangeSubscription =\n                merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n                    return !!(changes['hideToggle'] ||\n                        changes['disabled'] ||\n                        changes['togglePosition']);\n                })))\n                    .subscribe(() => this._changeDetectorRef.markForCheck());\n            // Avoids focus being lost if the panel contained the focused element and was closed.\n            panel.closed\n                .pipe(filter(() => panel._containsFocus()))\n                .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n            if (defaultOptions) {\n                this.expandedHeight = defaultOptions.expandedHeight;\n                this.collapsedHeight = defaultOptions.collapsedHeight;\n            }\n        }\n        /**\n         * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n         * @docs-private\n         */\n        get disabled() {\n            return this.panel.disabled;\n        }\n        /** Toggles the expanded state of the panel. */\n        _toggle() {\n            if (!this.disabled) {\n                this.panel.toggle();\n            }\n        }\n        /** Gets whether the panel is expanded. */\n        _isExpanded() {\n            return this.panel.expanded;\n        }\n        /** Gets the expanded state string of the panel. */\n        _getExpandedState() {\n            return this.panel._getExpandedState();\n        }\n        /** Gets the panel id. */\n        _getPanelId() {\n            return this.panel.id;\n        }\n        /** Gets the toggle position for the header. */\n        _getTogglePosition() {\n            return this.panel.togglePosition;\n        }\n        /** Gets whether the expand indicator should be shown. */\n        _showToggle() {\n            return !this.panel.hideToggle && !this.panel.disabled;\n        }\n        /**\n         * Gets the current height of the header. Null if no custom height has been\n         * specified, and if the default height from the stylesheet should be used.\n         */\n        _getHeaderHeight() {\n            const isExpanded = this._isExpanded();\n            if (isExpanded && this.expandedHeight) {\n                return this.expandedHeight;\n            }\n            else if (!isExpanded && this.collapsedHeight) {\n                return this.collapsedHeight;\n            }\n            return null;\n        }\n        /** Handle keydown event calling to toggle() if appropriate. */\n        _keydown(event) {\n            switch (event.keyCode) {\n                // Toggle for space and enter keys.\n                case SPACE:\n                case ENTER:\n                    if (!hasModifierKey(event)) {\n                        event.preventDefault();\n                        this._toggle();\n                    }\n                    break;\n                default:\n                    if (this.panel.accordion) {\n                        this.panel.accordion._handleHeaderKeydown(event);\n                    }\n                    return;\n            }\n        }\n        /**\n         * Focuses the panel header. Implemented as a part of `FocusableOption`.\n         * @param origin Origin of the action that triggered the focus.\n         * @docs-private\n         */\n        focus(origin = 'program', options) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        ngAfterViewInit() {\n            this._focusMonitor.monitor(this._element).subscribe(origin => {\n                if (origin && this.panel.accordion) {\n                    this.panel.accordion._handleHeaderFocus(this);\n                }\n            });\n        }\n        ngOnDestroy() {\n            this._parentChangeSubscription.unsubscribe();\n            this._focusMonitor.stopMonitoring(this._element);\n        }\n    }\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) { return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatExpansionPanelHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanelHeader, selectors: [[\"mat-expansion-panel-header\"]], hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"], hostVars: 15, hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? 0 - 1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, ngContentSelectors: _c4, decls: 5, vars: 1, consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]], template: function MatExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    } }, directives: [ɵngcc4.NgIf], styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"], encapsulation: 2, data: { animation: [\n            matExpansionAnimations.indicatorRotate,\n        ] }, changeDetection: 0 });\n    MatExpansionPanelHeader.ctorParameters = () => [\n        { type: MatExpansionPanel, decorators: [{ type: Host }] },\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatExpansionPanelHeader.propDecorators = {\n        expandedHeight: [{ type: Input }],\n        collapsedHeight: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel-header',\n                template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header mat-focus-indicator',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[style.height]': '_getHeaderHeight()',\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)'\n                },\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"]\n            }]\n    }], function () { return [{ type: MatExpansionPanel, decorators: [{\n                type: Host\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { expandedHeight: [{\n            type: Input\n        }], collapsedHeight: [{\n            type: Input\n        }] }); })();\n    return MatExpansionPanelHeader;\n})();\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nlet MatExpansionPanelDescription = /** @class */ (() => {\n    class MatExpansionPanelDescription {\n    }\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) { return new (t || MatExpansionPanelDescription)(); };\nMatExpansionPanelDescription.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelDescription, selectors: [[\"mat-panel-description\"]], hostAttrs: [1, \"mat-expansion-panel-header-description\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            }]\n    }], null, null); })();\n    return MatExpansionPanelDescription;\n})();\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nlet MatExpansionPanelTitle = /** @class */ (() => {\n    class MatExpansionPanelTitle {\n    }\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) { return new (t || MatExpansionPanelTitle)(); };\nMatExpansionPanelTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelTitle, selectors: [[\"mat-panel-title\"]], hostAttrs: [1, \"mat-expansion-panel-header-title\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            }]\n    }], null, null); })();\n    return MatExpansionPanelTitle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nlet MatAccordion = /** @class */ (() => {\n    class MatAccordion extends CdkAccordion {\n        constructor() {\n            super(...arguments);\n            /** Headers belonging to this accordion. */\n            this._ownHeaders = new QueryList();\n            this._hideToggle = false;\n            /**\n             * Display mode used for all expansion panels in the accordion. Currently two display\n             * modes exist:\n             *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n             *     panel at a different elevation from the rest of the accordion.\n             *  flat - no spacing is placed around expanded panels, showing all panels at the same\n             *     elevation.\n             */\n            this.displayMode = 'default';\n            /** The position of the expansion indicator. */\n            this.togglePosition = 'after';\n        }\n        /** Whether the expansion indicator should be hidden. */\n        get hideToggle() { return this._hideToggle; }\n        set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n        ngAfterContentInit() {\n            this._headers.changes\n                .pipe(startWith(this._headers))\n                .subscribe((headers) => {\n                this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n                this._ownHeaders.notifyOnChanges();\n            });\n            this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();\n        }\n        /** Handles keyboard events coming in from the panel headers. */\n        _handleHeaderKeydown(event) {\n            const { keyCode } = event;\n            const manager = this._keyManager;\n            if (keyCode === HOME) {\n                if (!hasModifierKey(event)) {\n                    manager.setFirstItemActive();\n                    event.preventDefault();\n                }\n            }\n            else if (keyCode === END) {\n                if (!hasModifierKey(event)) {\n                    manager.setLastItemActive();\n                    event.preventDefault();\n                }\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n        }\n        _handleHeaderFocus(header) {\n            this._keyManager.updateActiveItem(header);\n        }\n    }\nMatAccordion.ɵfac = function MatAccordion_Factory(t) { return ɵMatAccordion_BaseFactory(t || MatAccordion); };\nMatAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAccordion, selectors: [[\"mat-accordion\"]], contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n    } }, hostAttrs: [1, \"mat-accordion\"], hostVars: 2, hostBindings: function MatAccordion_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    } }, inputs: { multi: \"multi\", displayMode: \"displayMode\", togglePosition: \"togglePosition\", hideToggle: \"hideToggle\" }, exportAs: [\"matAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatAccordion.propDecorators = {\n        _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n        hideToggle: [{ type: Input }],\n        displayMode: [{ type: Input }],\n        togglePosition: [{ type: Input }]\n    };\nconst ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if multiple panel support is enabled.\n                    '[class.mat-accordion-multi]': 'this.multi'\n                }\n            }]\n    }], null, { displayMode: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], hideToggle: [{\n            type: Input\n        }], _headers: [{\n            type: ContentChildren,\n            args: [MatExpansionPanelHeader, { descendants: true }]\n        }] }); })();\n    return MatAccordion;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatExpansionModule = /** @class */ (() => {\n    class MatExpansionModule {\n    }\nMatExpansionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatExpansionModule });\nMatExpansionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatExpansionModule_Factory(t) { return new (t || MatExpansionModule)(); }, imports: [[CommonModule, CdkAccordionModule, PortalModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, { declarations: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; }, imports: function () { return [CommonModule, CdkAccordionModule, PortalModule]; }, exports: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ]\n            }]\n    }], null, null); })();\n    return MatExpansionModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, ɵ0 };\n\n//# sourceMappingURL=expansion.js.map","import { Injectable } from '@angular/core';\r\nimport {UploadValidator} from '@common/uploads/validation/upload-validator';\r\nimport {FileSizeValidation} from '@common/uploads/validation/validations/file-size-validation';\r\nimport {convertToBytes} from '@common/core/utils/convertToBytes';\r\nimport {FileTypeValidation} from '@common/uploads/validation/validations/file-type-validation';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AppearanceImageUploadValidator extends UploadValidator {\r\n    protected readonly DEFAULT_MAX_SIZE_MB = 5;\r\n\r\n    protected initValidations() {\r\n        const validations = [\r\n            new FileSizeValidation(\r\n                {maxSize: convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')},\r\n                this.i18n\r\n            ),\r\n            new FileTypeValidation({types: ['image']}, this.i18n),\r\n        ];\r\n\r\n        this.validations.push(...validations);\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Track} from '../../../models/Track';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {TrackFormComponent} from '../../../uploading/track-form/track-form.component';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'crupdate-track-page',\n    templateUrl: './crupdate-track-page.component.html',\n    styleUrls: ['./crupdate-track-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateTrackPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(TrackFormComponent, {static: true}) trackForm: AlbumFormComponent;\n    public track: Track;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        public settings: Settings,\n        private currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.track = data.api.track;\n            }\n        });\n    }\n\n    public toTracksPage() {\n        if (this.insideAdmin()) {\n            this.router.navigate(['/admin/tracks']);\n        } else {\n            this.router.navigate(['/user', this.currentUser.get('id'), this.currentUser.get('display_name'), 'tracks']);\n        }\n    }\n\n    public canDeactivate() {\n        return !this.trackForm.form.dirty;\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.includes('admin');\n    }\n}\n","<track-form [track]=\"track\" class=\"material-panel\" (canceled)=\"toTracksPage()\" [autoMatch]=\"settings.get('player.artist_type') === 'artist'\" (saved)=\"toTracksPage()\"></track-form>","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { openUploadWindow } from '../utils/open-upload-window';\r\nimport { UploadInputConfig } from '../upload-input-config';\r\nimport {UploadedFile} from '@common/uploads/uploaded-file';\r\n\r\n@Directive({\r\n    selector: '[uploadButton]'\r\n})\r\nexport class UploadButtonDirective implements OnInit {\r\n    @Input('uploadButton') config: UploadInputConfig = {};\r\n    @Output() filesSelected = new EventEmitter<UploadedFile[]>();\r\n\r\n    constructor(private el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        this.el.nativeElement.addEventListener('click', e => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            openUploadWindow(this.config).then(files => {\r\n                if (files && files.length) {\r\n                    this.filesSelected.emit(files);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, ElementRef, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { MatAutocomplete } from '@angular/material/autocomplete';\r\nimport { catchError, debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'chip-input',\r\n    templateUrl: './chip-input.component.html',\r\n    styleUrls: ['./chip-input.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: ChipInputComponent,\r\n        multi: true,\r\n    }]\r\n})\r\nexport class ChipInputComponent implements ControlValueAccessor, OnInit {\r\n    @Input() placeholder: string;\r\n    @Input() type = 'text';\r\n    @Input() suggestFn: (query: string) => Observable<string[]>;\r\n    @ViewChild('auto') matAutocomplete: MatAutocomplete;\r\n    @ViewChild('inputEl', {static: true}) inputEl: HTMLInputElement;\r\n\r\n    public formControl = new FormControl();\r\n\r\n    public propagateChange: Function;\r\n    public items$ = new BehaviorSubject<string[]>([]);\r\n    public suggestedValues$ = new Subject<string[]>();\r\n\r\n    constructor(public el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        if (this.suggestFn) {\r\n            this.bindToSearchControl();\r\n        }\r\n    }\r\n\r\n    public remove(index: number) {\r\n        const items = [...this.items$.value];\r\n        items.splice(index, 1);\r\n        this.items$.next(items);\r\n        this.propagateChange(this.items$.value);\r\n    }\r\n\r\n    public addFromChipInput(value: string, propagate = true) {\r\n        if ( ! this.matAutocomplete.isOpen) {\r\n            this.add(value, propagate);\r\n        }\r\n    }\r\n\r\n    public addFromAutocomplete(value: string, propagate = true) {\r\n        this.add(value, propagate);\r\n    }\r\n\r\n    private add(value: string, propagate = true) {\r\n        value = value ? value.trim() : '';\r\n        const duplicate = this.items$.value.indexOf(value) > -1;\r\n        if (value && !duplicate) {\r\n            this.items$.next([...this.items$.value, value]);\r\n            if (propagate) {\r\n                this.propagateChange(this.items$.value);\r\n            }\r\n        }\r\n        if (this.inputEl) {\r\n            this.inputEl.value = '';\r\n        }\r\n        this.formControl.setValue(null);\r\n        this.suggestedValues$.next([]);\r\n    }\r\n\r\n    public writeValue(value: string[] = []) {\r\n        if (value && value.length) {\r\n            value.forEach(item => this.add(item, false));\r\n        } else if (this.items$.value.length) {\r\n            while (this.items$.value.length !== 0) {\r\n                this.remove(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerOnChange(fn: Function) {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    public registerOnTouched() {}\r\n\r\n    private bindToSearchControl() {\r\n        this.formControl.valueChanges.pipe(\r\n            debounceTime(150),\r\n            distinctUntilChanged(),\r\n            switchMap(query => query ? this.suggestFn(query) : of([])),\r\n            catchError(() => of([])),\r\n        ).subscribe(values => {\r\n            this.suggestedValues$.next(values);\r\n        });\r\n    }\r\n}\r\n","<mat-chip-list #chipList [selectable]=\"false\">\r\n    <mat-chip\r\n        *ngFor=\"let item of items$ | async; index as i\"\r\n        [selectable]=\"false\"\r\n        [removable]=\"true\"\r\n        (removed)=\"remove(i)\"\r\n    >\r\n        {{item}}\r\n        <mat-icon matChipRemove svgIcon=\"cancel\"></mat-icon>\r\n    </mat-chip>\r\n    <input [placeholder]=\"placeholder | trans\"\r\n           #inputEl\r\n           [type]=\"type\"\r\n           class=\"mat-chip-input mat-input-element\"\r\n           [matChipInputFor]=\"chipList\"\r\n           [matChipInputAddOnBlur]=\"true\"\r\n           [matAutocomplete]=\"auto\"\r\n           [matAutocompleteConnectedTo]=\"{elementRef: el}\"\r\n           [formControl]=\"formControl\"\r\n           (matChipInputTokenEnd)=\"addFromChipInput($event.value)\" />\r\n</mat-chip-list>\r\n<mat-autocomplete class=\"chip-input-autocomplete-panel\" #auto=\"matAutocomplete\" (optionSelected)=\"addFromAutocomplete($event.option.viewValue)\">\r\n    <mat-option *ngFor=\"let value of suggestedValues$ | async\" [value]=\"value\">{{value}}</mat-option>\r\n</mat-autocomplete>\r\n","import { CanDeactivate } from '@angular/router';\r\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\r\nimport {Observable} from 'rxjs';\r\nimport {Injectable} from '@angular/core';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\r\n    constructor(private modal: Modal) {}\r\n\r\n    canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\r\n        if (component.canDeactivate()) {\r\n            return true;\r\n        } else {\r\n            return this.modal.show(ConfirmModalComponent, {\r\n                title: 'Unsaved Changes',\r\n                body:  'You have unsaved changes. Do you want to discard them?',\r\n                ok:    'Discard'\r\n            }).beforeClosed();\r\n        }\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Album} from '../../../models/Album';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'crupdate-album-page',\n    templateUrl: './crupdate-album-page.component.html',\n    styleUrls: ['./crupdate-album-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class CrupdateAlbumPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(AlbumFormComponent, {static: true}) albumForm: AlbumFormComponent;\n    public album: Album;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private currentUser: CurrentUser,\n        public settings: Settings,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.album = data.api.album;\n            }\n        });\n    }\n\n    public toAlbumsPage() {\n        if (this.router.url.includes('admin')) {\n            this.router.navigate(['/admin/albums']);\n        } else {\n            this.router.navigate(['/user', this.currentUser.get('id'), this.currentUser.get('display_name'), 'albums']);\n        }\n    }\n\n    public canDeactivate() {\n        return !this.albumForm.form.dirty;\n    }\n}\n","<album-form [album]=\"album\" class=\"material-panel\" (canceled)=\"toAlbumsPage()\" [autoMatch]=\"settings.get('player.artist_type') === 'artist'\" [confirmCancel]=\"false\" (saved)=\"toAlbumsPage()\"></album-form>","export enum UploadUri {\n    Image = 'uploads/images',\n}\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ChipInputComponent} from './chip-input.component';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport {TranslationsModule} from '@common/core/translations/translations.module';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MatChipsModule,\r\n        MatIconModule,\r\n        MatAutocompleteModule,\r\n        ReactiveFormsModule,\r\n        TranslationsModule,\r\n    ],\r\n    declarations: [\r\n        ChipInputComponent\r\n    ],\r\n    exports: [\r\n        ChipInputComponent\r\n    ]\r\n})\r\nexport class ChipInputModule {\r\n}\r\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n//# sourceMappingURL=throttle.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n    constructor(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n    constructor(destination, duration, scheduler, leading, trailing) {\n        super(destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    _next(value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n            else if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n    }\n    _complete() {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    clearThrottle() {\n        const throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    }\n}\nfunction dispatchNext(arg) {\n    const { subscriber } = arg;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadInputConfig, UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AppearanceImageUploadValidator} from '@common/admin/appearance/appearance-image-input/appearance-image-upload-validator';\nimport {UploadUri} from '@common/uploads/types/upload-uri.enum';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {UploadsApiService} from '@common/uploads/uploads-api.service';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\n\n@Component({\n    selector: 'upload-image-control',\n    templateUrl: './upload-image-control.component.html',\n    styleUrls: ['./upload-image-control.component.scss'],\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: UploadImageControlComponent,\n        multi: true,\n    }]\n})\nexport class UploadImageControlComponent implements ControlValueAccessor {\n    @Output() fileDeleted = new EventEmitter();\n    @Input() defaultBackground: string;\n    @Input() buttonText = 'Upload image';\n    @Input() uploadConfig: UploadApiConfig;\n    @Input() diskPrefix: string;\n    public uploadInputConfig: UploadInputConfig = {multiple: false, types: [UploadInputTypes.image]};\n    public src$ = new BehaviorSubject<string>(null);\n    private propagateChange: Function;\n\n    constructor(\n        private uploadQueue: UploadQueueService,\n        private imageValidator: AppearanceImageUploadValidator,\n        private uploadsApi: UploadsApiService,\n        private http: AppHttpClient,\n    ) {}\n\n    public writeValue(value: string) {\n        this.src$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public uploadImage(files: UploadedFile[]) {\n        this.uploadQueue.start(files, this.uploadConfig || this.defaultUploadConfig())\n            .subscribe(response => {\n                this.src$.next(response.fileEntry.url);\n                this.propagateChange(response.fileEntry.url);\n            });\n    }\n\n    public deleteUpload() {\n        const params = {paths: [this.src$.value], deleteForever: true};\n        const request = this.uploadConfig && this.uploadConfig.uri ?\n            this.http.delete(this.uploadConfig.uri, params) :\n            this.uploadsApi.delete(params);\n\n        request.subscribe(() => {\n            this.src$.next(null);\n            this.propagateChange(null);\n            this.fileDeleted.emit();\n        });\n    }\n\n    private defaultUploadConfig(): UploadApiConfig {\n        return {\n            httpParams: {diskPrefix: this.diskPrefix || 'common_media'},\n            uri: UploadUri.Image,\n            validator: this.imageValidator,\n        };\n    }\n}\n","<image-or-icon *ngIf=\"src$ | async as src; else defaultBg\" [src]=\"src\" class=\"inherit-size\"></image-or-icon>\r\n<ng-template #defaultBg>\r\n    <image-or-icon *ngIf=\"defaultBackground\" [src]=\"defaultBackground\" class=\"inherit-size\"></image-or-icon>\r\n</ng-template>\r\n<div class=\"action-buttons\">\r\n    <button type=\"button\" class=\"action-button\" mat-stroked-button color=\"accent\" [uploadButton]=\"uploadInputConfig\" (filesSelected)=\"uploadImage($event)\" trans>{{buttonText}}</button>\r\n    <button type=\"button\" class=\"action-button delete-button\" mat-icon-button *ngIf=\"src$ | async\" (click)=\"deleteUpload()\">\r\n        <mat-icon svgIcon=\"delete\"></mat-icon>\r\n    </button>\r\n</div>\r\n<upload-progress-bar></upload-progress-bar>","<div class=\"fake-input\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\n        <span *ngIf=\"selectedArtist$ | async as selectedArtist; else anyArtist\">\n            <media-image class=\"result-image\" [media]=\"selectedArtist\"></media-image>\n            {{selectedArtist.name}}\n        </span>\n    <ng-template #anyArtist>\n        <span trans>None</span>\n    </ng-template>\n    <div class=\"arrow-container\">\n        <div class=\"arrow\"></div>\n    </div>\n</div>\n\n<mat-menu #menu=\"matMenu\" class=\"album-artist-control-menu\">\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\n        <div class=\"search-input-wrapper\">\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput mat-menu-item trans-placeholder>\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n        </div>\n    </div>\n    <button mat-menu-item (click)=\"selectArtist(null)\">\n        <media-image default=\"artist\" class=\"result-image\"></media-image>\n        <div class=\"info any-user-info\">\n            <div class=\"name\" trans>No Artist</div>\n        </div>\n    </button>\n    <button mat-menu-item *ngFor=\"let artist of artists$ | async\" (click)=\"selectArtist(artist)\">\n        <media-image class=\"result-image\" [media]=\"artist\"></media-image>\n        <div class=\"user-info\">\n            <div class=\"name\">{{artist.name}}</div>\n            <div class=\"email\" trans>Artist</div>\n        </div>\n    </button>\n    <button mat-menu-item disabled *ngIf=\"searchedOnce && !(artists$ | async).length\" trans>No artists found.</button>\n</mat-menu>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    finalize,\n    map,\n    switchMap\n} from 'rxjs/operators';\nimport {MixedArtist} from '../../../web-player/artists/mixed-artist';\nimport {Search} from '../../../web-player/search/search.service';\nimport {ARTIST_MODEL} from '../../../models/Artist';\n\n@Component({\n    selector: 'album-artist-control',\n    templateUrl: './album-artist-control.component.html',\n    styleUrls: ['./album-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'tabindex': '0'},\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AlbumArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class AlbumArtistControlComponent implements OnInit, ControlValueAccessor {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public artists$ = new BehaviorSubject<MixedArtist[]>([]);\n    public selectedArtist$ = new BehaviorSubject<MixedArtist>(null);\n    private propagateChange: Function;\n    public searchedOnce = false;\n\n    constructor(private search: Search) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: MixedArtist) {\n        this.selectedArtist$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchArtists(query)),\n            catchError(() => of([])),\n        ).subscribe(users => {\n            this.searchedOnce = true;\n            this.artists$.next(users);\n        });\n    }\n\n    private searchArtists(query: string): Observable<MixedArtist[]> {\n        this.loading$.next(true);\n        return this.search.media(query, {limit: 7, forceLocal: true, modelTypes: [ARTIST_MODEL]})\n            .pipe(\n                finalize(() =>  this.loading$.next(false)),\n                map(response => response.results.artists),\n            );\n    }\n\n    public onMenuOpened() {\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectArtist(artist: MixedArtist) {\n        this.selectedArtist$.next(artist);\n        this.propagateChange(artist);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<form (ngSubmit)=\"submit()\" [formGroup]=\"form\">\r\n    <div class=\"main-info-fields\">\r\n        <div class=\"left-column\">\r\n            <upload-image-control formControlName=\"image\" uploadType=\"album\"></upload-image-control>\r\n            <button mat-flat-button color=\"accent\" type=\"button\" class=\"upload-tracks-button\" [uploadButton]=\"uploadButtonConfig\" (filesSelected)=\"uploadFiles($event)\" trans>Upload Tracks</button>\r\n        </div>\r\n        <div class=\"text-fields-container many-inputs\">\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-name\" trans>Name</label>\r\n                <input type=\"text\" id=\"album-form-name\" formControlName=\"name\" required>\r\n                <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-release_date\" trans>Release Date</label>\r\n                <input type=\"date\" placeholder=\"YYYY-MM-DD\" id=\"album-form-release_date\" formControlName=\"release_date\" required>\r\n                <div class=\"error\" *ngIf=\"errors.release_date\">{{errors.release_date}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\" *ngIf=\"!hideArtistControl || (!artist && settings.get('player.artist_type') === 'artist')\">\r\n                <label for=\"album-form-artist\" trans>Artist</label>\r\n                <album-artist-control id=\"album-form-artist\" formControlName=\"artist\"></album-artist-control>\r\n                <div class=\"error\" *ngIf=\"errors.artist_id\">{{errors.artist_id}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-description\" trans>Description</label>\r\n                <textarea type=\"text\" id=\"album-form-description\" formControlName=\"description\" minlength=\"10\" maxlength=\"250\" rows=\"5\"></textarea>\r\n                <div class=\"error\" *ngIf=\"errors.description\">{{errors.description}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-genres\" trans>Genres</label>\r\n                <chip-input placeholder=\"+Add genre\" id=\"album-form-genres\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\r\n                <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-tags\" trans>Tags</label>\r\n                <chip-input placeholder=\"+Add tag\" id=\"album-form-tags\" formControlName=\"tags\" [suggestFn]=\"suggestTagFn\"></chip-input>\r\n                <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\r\n            </div>\r\n\r\n            <button type=\"submit\" [disabled]=\"loading$ | async\" mat-raised-button color=\"accent\" trans>Save</button>\r\n            <button type=\"button\" mat-button (click)=\"maybeCancel()\" trans>Cancel</button>\r\n        </div>\r\n    </div>\r\n</form>\r\n\r\n<ul class=\"track-list\" cdkDropList (cdkDropListDropped)=\"reorderTracks($event)\">\r\n    <li class=\"track-list-item\" *ngFor=\"let track of allTracks$ | async; trackBy: trackByFn; index as index\" cdkDrag>\r\n        <track-form [albumForm]=\"form\" [track]=\"track\" *ngIf=\"track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\r\n            <button mat-icon-button cdkDragHandle type=\"button\">\r\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\r\n            </button>\r\n        </track-form>\r\n        <track-form [albumForm]=\"form\" [uploadQueueItem]=\"track\" *ngIf=\"!track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\r\n            <button mat-icon-button cdkDragHandle type=\"button\">\r\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\r\n            </button>\r\n        </track-form>\r\n    </li>\r\n</ul>\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChildren\n} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Albums} from '../../web-player/albums/albums.service';\nimport {TrackFormComponent} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {USER_MODEL} from '@common/core/types/models/User';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {Track} from '../../models/Track';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadInputConfig, UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {Artist} from '../../models/Artist';\nimport {Settings} from '@common/core/config/settings.service';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {Search} from '../../web-player/search/search.service';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\n\ndeclare module 'common/uploads/types/upload-http-params' {\n    interface UploadHttpParams {\n        autoMatch?: boolean;\n    }\n}\n\n@Component({\n    selector: 'album-form',\n    templateUrl: './album-form.component.html',\n    styleUrls: ['./album-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumFormComponent implements OnInit {\n    public uploadButtonConfig: UploadInputConfig = {multiple: true, types: [UploadInputTypes.audio, UploadInputTypes.video]};\n    // album that is being edited\n    @Input() album: Album;\n    // artist album should be attached to\n    @Input() artist: Artist;\n    @Input() hideArtistControl = false;\n    @Input() confirmCancel = true;\n    @Output() canceled = new EventEmitter();\n    @Input() autoMatch = false;\n    @Output() saved = new EventEmitter<Album>();\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n\n    public errors: Partial<Album> = {};\n    public loading$ = new BehaviorSubject(false);\n    public allTracks$ = new BehaviorSubject<(UploadQueueItem|Track)[]>([]);\n\n    public form = this.fb.group({\n        name: [''],\n        image: [''],\n        artist: [null],\n        release_date: [new Date().toISOString().slice(0, 10)],\n        description: [''],\n        tags: [[]],\n        genres: [[]],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public uploadQueue: UploadQueueService,\n        private albums: Albums,\n        private cd: ChangeDetectorRef,\n        private currentUser: CurrentUser,\n        private modal: Modal,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        public settings: Settings,\n        private search: Search,\n    ) {}\n\n    ngOnInit() {\n        this.allTracks$ = new BehaviorSubject([\n            ...(this.album ? this.album.tracks : []),\n            ...this.onlyValidUploads(this.uploadQueue.uploads$.value),\n        ]);\n        this.uploadQueue.uploadsAdded$.subscribe(uploads => {\n            this.allTracks$.next([\n                ...this.allTracks$.value,\n                ...this.onlyValidUploads(uploads),\n            ]);\n        });\n        if (this.album) {\n            const value = {\n                ...this.album,\n                tags: this.album.tags.map(t => t.name),\n                genres: this.album.genres.map(g => g.display_name || g.name),\n            };\n            this.form.patchValue(value);\n        }\n    }\n\n    private onlyValidUploads(uploads: UploadQueueItem[]) {\n        return uploads.filter(upload => !upload.error$.value);\n    }\n\n    public reorderTracks(e: CdkDragDrop<never>) {\n        const sortedTracks = this.allTracks$.value;\n        moveItemInArray(sortedTracks, e.previousIndex, e.currentIndex);\n        this.allTracks$.next(sortedTracks);\n    }\n\n    public submit() {\n        this.loading$.next(true);\n\n        if (this.trackForms.some(f => f.isUploading())) {\n            this.toast.open('Some tracks are still uploading.');\n            return;\n        }\n\n        const payload = {\n            ...this.form.value,\n            tracks: this.trackForms.map(f => f.getPayload()),\n        };\n\n        // set artist\n        if (payload.artist) {\n            payload.artist_id = payload.artist.id;\n            payload.artist_type = payload.artist.artist_type;\n        } else if (this.artist) {\n            payload.artist_id = this.artist.id;\n            payload.artist_type = this.artist.model_type;\n        } else if (this.settings.get('player.artist_type') === 'user') {\n            payload.artist_id = this.currentUser.get('id');\n            payload.artist_type = USER_MODEL;\n        }\n        delete payload.artist;\n\n        const request = this.album ?\n            this.albums.update(this.album.id, payload) :\n            this.albums.create(payload);\n\n        request\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.form.markAsPristine();\n                this.toast.open('Album saved.');\n                this.uploadQueue.reset();\n                this.saved.emit(response.album);\n            }, (errResponse: BackendErrorResponse) => {\n                this.errors = errResponse.errors;\n                scrollInvalidInputIntoView(this.errors, 'track-form');\n                this.cd.markForCheck();\n            });\n    }\n\n    public maybeCancel() {\n        if ( ! this.confirmCancel) {\n            this.canceled.emit();\n            return;\n        }\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Album',\n            body:  'Are you sure you want to cancel all uploads and delete this album?',\n            ok:    'Delete'\n        }).beforeClosed().subscribe(confirmed => {\n            if (confirmed) {\n                this.form.reset();\n                this.uploadQueue.reset();\n                this.canceled.emit();\n            }\n        });\n    }\n\n    public uploadFiles(uploadedFiles: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {autoMatch: this.autoMatch, diskPrefix: 'track_media', disk: 'public'},\n            validator: this.audioValidator\n        } as UploadApiConfig;\n        this.uploadQueue.start(uploadedFiles, params).subscribe(() => {\n            //\n        }, () => this.toast.open('Could not upload tracks.'));\n    }\n\n    public trackRemoved(track: UploadQueueItem | Track) {\n        const newTracks = this.allTracks$.value.filter(t => t.id !== track.id);\n        this.allTracks$.next(newTracks);\n    }\n\n    public trackByFn = (i: number, upload: UploadQueueItem|Track) => upload.id;\n\n    public suggestTagFn = (query: string) => {\n        return this.search.media(query, {modelTypes: ['App\\\\Tag'], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    };\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {modelTypes: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, OnDestroy } from '@angular/core';\r\nimport { UploadQueueService } from '../upload-queue/upload-queue.service';\r\nimport { animationFrameScheduler, Subscription } from 'rxjs';\r\nimport { throttleTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'upload-progress-bar',\r\n    templateUrl: './upload-progress-bar.component.html',\r\n    styleUrls: ['./upload-progress-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UploadProgressBarComponent implements OnDestroy {\r\n    @HostBinding('class.hidden') hidden = true;\r\n    private subscription: Subscription;\r\n    public progress: number;\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        public uploadQueue: UploadQueueService,\r\n        private cd: ChangeDetectorRef,\r\n    ) {\r\n        this.subscription = this.uploadQueue.totalProgress()\r\n            // material progress bar animation lasts 250ms\r\n            .pipe(throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}))\r\n            .subscribe(progress => {\r\n                this.progress = progress;\r\n                this.hidden = progress === 100 || this.uploadQueue.count$.value.pending === 0;\r\n                this.cd.markForCheck();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n}\r\n\r\n","<mat-progress-bar mode=\"determinate\" [value]=\"progress\" color=\"accent\"></mat-progress-bar>\r\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'uploading-host',\n  templateUrl: './uploading-host.component.html',\n  styleUrls: ['./uploading-host.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UploadingHostComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {UploadPageComponent} from './upload-page/upload-page.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport {UploadsModule} from '@common/uploads/uploads.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ChipInputModule} from '@common/core/ui/chip-input/chip-input.module';\nimport {TrackFormComponent} from './track-form/track-form.component';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {AlbumFormComponent} from './album-form/album-form.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {TrackUploadHeaderComponent} from './track-upload-header/track-upload-header.component';\nimport {TrackArtistControlComponent} from './track-form/track-artist-control/track-artist-control.component';\nimport {AlbumControlComponent} from './track-form/album-control/album-control.component';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MediaImageModule} from '../web-player/shared/media-image/media-image.module';\nimport {RouterModule} from '@angular/router';\nimport {UploadedMediaPreviewComponent} from './uploaded-media-preview/uploaded-media-preview.component';\nimport { AlbumArtistControlComponent } from './album-form/album-artist-control/album-artist-control.component';\nimport {UploadingRoutingModule} from './uploading-routing.module';\nimport { UploadingHostComponent } from './uploading-host/uploading-host.component';\n\n@NgModule({\n    declarations: [\n        UploadPageComponent,\n        TrackFormComponent,\n        AlbumFormComponent,\n        TrackUploadHeaderComponent,\n        TrackArtistControlComponent,\n        AlbumControlComponent,\n        UploadedMediaPreviewComponent,\n        AlbumArtistControlComponent,\n        UploadingHostComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        MediaImageModule,\n        UploadingRoutingModule,\n\n        MatIconModule,\n        MatProgressBarModule,\n        TranslationsModule,\n        UploadsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MatButtonModule,\n        ChipInputModule,\n        MatChipsModule,\n        MatSlideToggleModule,\n        MatTooltipModule,\n        UploadImageControlModule,\n        DragDropModule,\n        MatAutocompleteModule,\n        MatMenuModule,\n        LoadingIndicatorModule,\n    ],\n    exports: [\n        TrackFormComponent,\n        AlbumFormComponent,\n    ]\n})\nexport class UploadingModule {\n}\n","import {UploadPageComponent} from './upload-page/upload-page.component';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {TrackPageResolver} from '../web-player/tracks/track-page/track-page-resolver.service';\r\nimport {CrupdateTrackPageComponent} from '../admin/tracks/crupdate-track-page/crupdate-track-page.component';\r\nimport {CrupdateAlbumPageComponent} from '../admin/albums/crupdate-album-page/crupdate-album-page.component';\r\nimport {AlbumResolver} from '../web-player/albums/album/album-resolver.service';\r\nimport {PendingChangesGuard} from '@common/guards/pending-changes/pending-changes-guard.service';\r\nimport {UploadingHostComponent} from './uploading-host/uploading-host.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: UploadingHostComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: UploadPageComponent,\r\n                data: {permissions: ['tracks.create', 'albums.create']}\r\n            },\r\n            {\r\n                path: 'tracks/:id/edit',\r\n                component: CrupdateTrackPageComponent,\r\n                resolve: {api: TrackPageResolver},\r\n                canDeactivate: [PendingChangesGuard],\r\n            },\r\n            {\r\n                path: 'albums/:id/edit',\r\n                component: CrupdateAlbumPageComponent,\r\n                resolve: {api: AlbumResolver},\r\n                canDeactivate: [PendingChangesGuard],\r\n                data: {simplified: true},\r\n            },\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UploadingRoutingModule {\r\n}\r\n","<router-outlet></router-outlet>\n","import { UploadedFile } from '../uploaded-file';\r\n\r\nexport async function readUploadedFolders(entries: WebKitEntry[]): Promise<UploadedFile[]> {\r\n    let files = [];\r\n\r\n    for (const key in entries) {\r\n        const entry = entries[key];\r\n\r\n        if ( ! entry.isDirectory) {\r\n            files.push(await transformFileEntry(entry as WebKitFileEntry));\r\n        } else {\r\n            files = files.concat(await readDirRecursive(entry as WebKitDirectoryEntry));\r\n        }\r\n    }\r\n\r\n    return files;\r\n}\r\n\r\nasync function readDirRecursive(entry: WebKitDirectoryEntry, files = []) {\r\n    const entries = await readEntries(entry);\r\n\r\n    for (const key in entries) {\r\n        const childEntry = entries[key];\r\n\r\n        if (childEntry.isDirectory) {\r\n            await readDirRecursive(childEntry as WebKitDirectoryEntry, files);\r\n        } else {\r\n            files.push(await transformFileEntry(childEntry as WebKitFileEntry));\r\n        }\r\n    }\r\n\r\n    return files;\r\n}\r\n\r\nfunction readEntries(dir: WebKitDirectoryEntry): Promise<WebKitEntry[]> {\r\n    return new Promise(resolve => {\r\n        const reader = dir.createReader();\r\n        reader.readEntries(entries => resolve(entries as any));\r\n    });\r\n}\r\n\r\nfunction transformFileEntry(entry: WebKitFileEntry) {\r\n    return new Promise(resolve => {\r\n        entry.file((file: any) => {\r\n            resolve(new UploadedFile(file as File, entry.fullPath));\r\n        });\r\n    });\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { openUploadWindow } from '../utils/open-upload-window';\r\nimport { UploadedFile } from '../uploaded-file';\r\nimport { readUploadedFolders } from '../utils/read-uploaded-folders';\r\nimport { UploadInputConfig } from '@common/uploads/upload-input-config';\r\n\r\n@Directive({\r\n    selector: '[fileDropzone]',\r\n})\r\nexport class UploadDropzoneDirective implements OnInit, OnDestroy {\r\n    @Input() disableDropzoneClick = false;\r\n    @Input() disableDropzone = false;\r\n    @Input() clickButton: ElementRef;\r\n    @Input('fileDropzone') uploadConfig: UploadInputConfig = {};\r\n    @Output() filesDropped: EventEmitter<UploadedFile[]> = new EventEmitter();\r\n\r\n    constructor(protected el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        const el = this.el.nativeElement;\r\n        el.addEventListener('dragenter', (e) => this.handleDragEnter(e));\r\n        el.addEventListener('dragover', (e) => this.handleDragOver(e));\r\n        el.addEventListener('dragleave', (e) => this.handleDragLeave(e));\r\n        el.addEventListener('drop', (e) => this.handleDrop(e));\r\n\r\n        if ( ! this.disableDropzoneClick) {\r\n            const trigger = this.clickButton ? this.clickButton.nativeElement : el;\r\n            trigger.addEventListener('click', () => this.handleClick());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeClassesFromDropzone();\r\n    }\r\n\r\n    protected handleClick() {\r\n        if (this.disableDropzone) return;\r\n        openUploadWindow(this.uploadConfig).then(files => {\r\n            this.emitUploadEvent(files);\r\n        });\r\n    }\r\n\r\n    public handleDragEnter(e) {\r\n        if (this.dropzoneDisabled(e)) return;\r\n        this.el.nativeElement.classList.add('file-over-dropzone');\r\n    }\r\n\r\n    public handleDragOver(e) {\r\n        if (e.preventDefault) e.preventDefault();\r\n        e.dataTransfer.dropEffect = this.dropzoneDisabled(e) ? 'none' : 'move';\r\n        return false;\r\n    }\r\n\r\n    public handleDragLeave(e: MouseEvent) {\r\n        const newEl = document.elementFromPoint(e.clientX, e.clientY);\r\n        if (this.el.nativeElement.contains(newEl)) return;\r\n        this.removeClassesFromDropzone();\r\n    }\r\n\r\n    public async handleDrop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.removeClassesFromDropzone();\r\n        if (this.dropzoneDisabled(e) || !e.dataTransfer.items) return;\r\n\r\n        const items = Array.from(e.dataTransfer.items)\r\n            .filter((item: DataTransferItem) => item.kind === 'file')\r\n            .map((item: DataTransferItem) => {\r\n                return item.webkitGetAsEntry();\r\n            });\r\n\r\n        if (items.length) {\r\n            this.emitUploadEvent(await readUploadedFolders(items));\r\n        }\r\n    }\r\n\r\n    protected emitUploadEvent(files: UploadedFile[]) {\r\n        this.filesDropped.emit(files);\r\n    }\r\n\r\n    protected removeClassesFromDropzone() {\r\n        this.el.nativeElement.classList.remove('file-over-dropzone');\r\n    }\r\n\r\n    protected dropzoneDisabled(e: DragEvent) {\r\n        const hasFiles = e.dataTransfer.types.find(type => type.toLowerCase() === 'files');\r\n        return this.disableDropzone || ! hasFiles;\r\n    }\r\n}\r\n","<div class=\"media-image-container\" [class.show-album-border]=\"!isTrack(media)\">\n    <media-image [media]=\"media\"></media-image>\n    <img class=\"album-border-image\" [src]=\"settings.getAssetUrl('images/album-border.png')\" alt=\"album border image\">\n</div>\n<div class=\"middle-column\">\n    <div class=\"artist-name\">{{isTrack(media) ? media.artists[0].name : media.artist.name}}</div>\n    <div class=\"track-name\">{{media.name}}</div>\n    <div class=\"genre-row\">\n        <mat-chip class=\"track-genre\" *ngIf=\"media.genres.length\">{{media.genres[0].name}}</mat-chip>\n    </div>\n    <div class=\"message\">\n        <span trans>Upload complete.</span> <a [routerLink]=\"mediaLink()\" trans> View now.</a>\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"title\" trans>Share your new {{isTrack(media) ? 'track' : 'album' }}</div>\n    <div class=\"share-icons\">\n        <button mat-icon-button (click)=\"shareUsing('facebook')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/facebook.png')}}\" alt=\"facebook-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('twitter')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/twitter.png')}}\" alt=\"twitter-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('tumblr')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/tumblr.png')}}\" alt=\"tumblr-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('blogger')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/bloggr.png')}}\" alt=\"blogger-icon\">\n        </button>\n    </div>\n    <div class=\"track-link-input input-container\">\n        <label for=\"media-item-link\" class=\"hidden\" trans>Media link</label>\n        <input #trackLinkInput id=\"media-item-link\" type=\"text\" readonly [value]=\"mediaUrl()\" (click)=\"$event.target.select()\">\n    </div>\n</div>\n","import {Component, OnInit, ChangeDetectionStrategy, Input, ViewChild, ElementRef} from '@angular/core';\nimport {Track, TRACK_MODEL} from '../../models/Track';\nimport {ShareableNetworks, shareLinkSocially} from '@common/core/utils/share-link-socially';\nimport {Settings} from '@common/core/config/settings.service';\nimport {WebPlayerUrls} from '../../web-player/web-player-urls.service';\nimport {Album} from '../../models/Album';\n\n@Component({\n    selector: 'uploaded-media-preview',\n    templateUrl: './uploaded-media-preview.component.html',\n    styleUrls: ['./uploaded-media-preview.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'material-panel'},\n})\nexport class UploadedMediaPreviewComponent implements OnInit {\n    @ViewChild('trackLinkInput', {static: true}) trackLinkInput: ElementRef<HTMLInputElement>;\n    @Input() media: Track|Album;\n\n    constructor(\n        public settings: Settings,\n        public urls: WebPlayerUrls\n    ) {}\n\n    ngOnInit() {\n        setTimeout(() => {\n            this.trackLinkInput.nativeElement.focus();\n            this.trackLinkInput.nativeElement.select();\n        });\n    }\n\n    public mediaLink() {\n        if (this.isTrack(this.media)) {\n            return this.urls.track(this.media);\n        } else {\n            return this.urls.album(this.media);\n        }\n    }\n\n    public mediaUrl() {\n        return this.urls.routerLinkToUrl(this.mediaLink());\n    }\n\n    public shareUsing(network: ShareableNetworks) {\n        shareLinkSocially(network, this.mediaUrl());\n    }\n\n    public isTrack(media: Track|Album): media is Track {\n        return media.model_type === TRACK_MODEL;\n    }\n}\n","<div class=\"dropzone\" [fileDropzone]=\"uploadConfig\" [clickButton]=\"clickButton\" (filesDropped)=\"uploadTracks($event)\">\r\n    <div class=\"title\" trans>Drag and drop your tracks, videos & albums here.</div>\r\n    <div class=\"action-button\">\r\n        <button mat-flat-button color=\"accent\" type=\"button\" class=\"upload-button\" #clickMatButton trans>or choose files to upload</button>\r\n    </div>\r\n    <div class=\"setting-toggle-container\" *ngIf=\"uploadQueue.isEmpty()\">\r\n        <mat-slide-toggle (change)=\"createAlbum$.next($event.checked)\" trans>Create Album</mat-slide-toggle>\r\n        <p trans>Attach all uploaded files to a new album.</p>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"setting-toggle-container create-artists-toggle material-panel\" *ngIf=\"insideAdmin() && currentUser.hasPermission('artists.create')\">\r\n    <mat-slide-toggle (change)=\"autoCreateArtists = $event.checked\" trans>Create Artists</mat-slide-toggle>\r\n    <p trans>Automatically create artists based on track metadata (unless artist already exists).</p>\r\n</div>\r\n\r\n<div class=\"minutes-container\" *ngIf=\"currentUser.getRestrictionValue('tracks.create', 'minutes') as minuteLimit\">\r\n    <span trans>You have {{minuteLimit}} minutes left. Try <a class=\"hover-underline\" routerLink=\"/billing/upgrade\" target=\"_blank\">Pro accounts</a> to get more time and access to advanced features.</span>\r\n</div>\r\n\r\n<div class=\"track-upload-queue\" *ngIf=\"uploadQueue.uploads$ | async as uploads\">\r\n    <ng-container *ngIf=\"uploads.length\">\r\n        <album-form class=\"material-panel\" *ngIf=\"createAlbum$ | async; else createTracks\" [hideArtistControl]=\"!insideAdmin()\" (saved)=\"addSavedMedia($event)\"></album-form>\r\n        <ng-template #createTracks>\r\n            <ng-container *ngIf=\"errors$ | async as errors\">\r\n                <div class=\"track-panel material-panel\" *ngFor=\"let upload of uploads; trackBy: trackByFn\">\r\n                    <track-form [uploadQueueItem]=\"upload\" (saved)=\"addSavedMedia($event)\"></track-form>\r\n                </div>\r\n            </ng-container>\r\n        </ng-template>\r\n    </ng-container>\r\n</div>\r\n\r\n<div class=\"saved-tracks\">\r\n    <uploaded-media-preview [media]=\"media\" *ngFor=\"let media of savedMedia$ | async\"></uploaded-media-preview>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, ElementRef, QueryList, ViewChild, ViewChildren} from '@angular/core';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {UploadInputConfig, UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {Track} from '../../models/Track';\nimport {TrackFormComponent} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {Router} from '@angular/router';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\n\n@Component({\n    selector: 'upload-page',\n    templateUrl: './upload-page.component.html',\n    styleUrls: ['./upload-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class UploadPageComponent {\n    @ViewChild('clickMatButton', {read: ElementRef, static: true}) clickButton: ElementRef<HTMLButtonElement>;\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n    public errors$ = new BehaviorSubject<{[key: string]: {[K in keyof Partial<Track>]: string}}>({});\n    public uploadConfig: UploadInputConfig = {\n        types: [UploadInputTypes.video, UploadInputTypes.audio],\n        multiple: true\n    };\n    public savedMedia$ = new BehaviorSubject<(Track|Album)[]>([]);\n    public createAlbum$ = new BehaviorSubject<boolean>(false);\n    public autoCreateArtists = false;\n\n    constructor(\n        private track: Tracks,\n        public currentUser: CurrentUser,\n        public uploadQueue: UploadQueueService,\n        public settings: Settings,\n        protected tracks: Tracks,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        private router: Router,\n        private waveGenerator: WaveformGenerator,\n    ) {}\n\n    public uploadTracks(files: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {autoMatch: this.autoCreateArtists, diskPrefix: 'track_media', disk: 'public'},\n            validator: this.audioValidator,\n            willProcessFiles: true,\n        } as UploadApiConfig;\n        this.uploadQueue.start(files, params).subscribe(response => {\n            const queueItem = this.uploadQueue.find(response.queueItemId);\n            this.waveGenerator.generate(queueItem.uploadedFile.native).then(waveData => {\n                queueItem.customData = {waveData};\n                queueItem.finishProcessing();\n            });\n        });\n    }\n\n    public addSavedMedia(newMedia: Track|Album) {\n        this.savedMedia$.next([...this.savedMedia$.value, newMedia]);\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.indexOf('admin') > -1;\n    }\n\n    public trackByFn = (i: number, upload: UploadQueueItem) => upload.id;\n}\n"]}