{"version":3,"sources":["webpack:///src/common/admin/appearance/appearance-editor/appearance-editor.service.ts","webpack:///src/common/admin/appearance/appearance-editor-config.token.ts","webpack:///src/common/shared/appearance/commands/appearance-commands.ts","webpack:///src/common/core/utils/remove-duplicate-slashes.ts","webpack:///src/common/admin/appearance/appearance-panel-meta/appearance-panel-meta.component.html","webpack:///src/common/admin/appearance/appearance-panel-meta/appearance-panel-meta.component.ts","webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-input.component.html","webpack:///src/common/admin/appearance/highlight-in-preview.directive.ts","webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-input.component.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme.service.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.component.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service.ts","webpack:///src/common/core/ui/custom-menu/menu-item.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.ts","webpack:///src/common/shared/icon-selector/icon-selector.component.html","webpack:///src/common/shared/icon-selector/icon-selector.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.html","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.html","webpack:///src/common/admin/appearance/appearance.component.html","webpack:///src/common/admin/appearance/appearance.component.ts","webpack:///src/common/admin/appearance/can-deactivate-appearance.guard.ts","webpack:///src/common/admin/appearance/appearance-editor/appearance-editor-resolver.service.ts","webpack:///src/common/admin/appearance/appearance-routing.module.ts","webpack:///src/common/shared/icon-selector/icon-selector.module.ts","webpack:///src/common/admin/appearance/base-appearance.module.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.module.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slider.js","webpack:///src/app/admin/appearance/homepage-appearance-panel/homepage-appearance-panel.component.html","webpack:///src/app/admin/appearance/homepage-appearance-panel/homepage-appearance-panel.component.ts","webpack:///src/app/admin/appearance/app-appearance.module.ts","webpack:///src/app/admin/appearance/app-appearance-config.ts","webpack:///src/common/core/utils/map-order.ts"],"names":["AppearanceEditor","APPEARANCE_EDITOR_CONFIG","DEFAULT_APPEARANCE_EDITOR_CONFIG","navigationRoutes","menus","availableRoutes","positions","sections","name","position","route","queryParams","type","Navigate","key","value","SetConfig","selector","index","Select","Deselect","SetColors","content","SetCustomCss","SetCustomHtml","settings","router","http","toast","activePanel$","BehaviorSubject","defaultSettings","initiated$","ReplaySubject","loading$","changes$","this","next","panel","config","find","navigate","iframe","fromEvent","window","pipe","filter","e","data","URL","origin","location","hostname","subscribe","complete","forEach","setting","initConfig","initIframe","changes","addChanges","observable","saveRequest","c","post","finalize","share","open","request","panelConfig","postMessage","defaultRoute","command","previewWindow","startsWith","get","merged","all","sort","a","b","url","getBaseUrl","src","replace","contentWindow","AppearancePanelMetaComponent","path","back","HighlightInPreviewDirective","AppearanceImageInputComponent","GeneralAppearancePanelComponent","CssThemeService","editor","uploadQueue","validator","image$","showToast","params","uri","backendUri","Image","httpParams","diskPrefix","types","image","then","files","start","response","updateValue","fileEntry","defaultValue","propagateChange","fn","provide","useExisting","multi","openModal","$event","stopPropagation","el","nativeElement","addEventListener","selectNode","deselectNode","fb","form","group","defaults","Object","keys","controls","currentValue","patchValue","valueChanges","id","put","ids","CrupdateCssThemeModalComponent","ColorPickerInputComponent","dialogRef","cssTheme","errors$","is_dark","default_dark","default_light","theme","setValue","update","create","close","errResponse","errors","overlayPanel","color$","pickerSub","unsubscribe","BeColorPickerModule","components","target","color","valueChanged","openColorPicker","CssThemeColorsPanelComponent","themes","colorCache","setSaveRequest","saveColors","bind","entries","colors","addControl","setColors","payload","ThemesAppearancePanelComponent","MenuEditor","MenuItemCategoriesService","appearance","modal","loadedThemes$","selectedTheme$","path$","map","push","reloadThemes","querySub","afterClosed","newTheme","queryParamsHandling","setSelectedTheme","closeActivePanel","show","title","body","ok","confirmed","deleteTheme","pagination","bindToQueryParams","t","openPreviousPanel","MenuItem","order","condition","activeExact","Math","floor","random","allMenus$","activeMenu$","allMenus","commitChanges","previousIndex","currentIndex","activeMenu","items","i","indexOf","splice","item","transformLocalLinksToRoutes","baseUrl","action","JSON","stringify","setConfig","json","parse","menuData","menu","getWithCache","AddMenuItemPanelComponent","overlayPanelRef","itemCategories","linkForm","label","menuItemCategories","categories","addItem","reset","addLinkMenuItem","IconSelectorComponent","icons$","iconSelected","icons","icon","observers","length","emitValue","MenuItemsComponent","cd","subscriptions","subscription","reorderActiveMenuItems","selectedMenuItem","removeItem","menuItem","detectChanges","MenusAppearancePanelComponent","setFromJson","slice","offsetX","panelClass","deleteActive","SeoAppearancePanelComponent","seoFields","field","control","CodeEditorModalComponent","CustomCodeAppearancePanelComponent","lazyLoader","syntaxInvalid$","initEditor","contents","language","overrideDialogCloseEvents","getValue","loadAsset","ace","edit","editorEl","getSession","setMode","setTheme","$blockScrolling","Infinity","on","annotations","getAnnotations","test","text","setAnnotations","syntaxInvalid","disableClose","backdropClick","keydownEvents","event","keyCode","confirm","initialValue","newValue","saveChanges","addCodeToPreview","CanDeactivateAppearance","AppearanceComponent","AppearanceEditorResolver","AppearanceRoutingModule","IconSelectorModule","BaseAppearanceModule","ColorPickerInputModule","breakpoints","leftColumnIsHidden","panelPortal$","component","isMobile$","init","snapshot","routerSub","openPanel","str","closeEditor","toggleLeftSidebar","bodyBold","cancel","routes","permissions","resolve","state","catchError","mergeMap","of","canActivate","canDeactivate","children","forChild","useValue","MatSliderModule","ɵmod","ɵinj","factory","imports","HomepageAppearancePanelComponent","AppAppearanceModule","CONFIG_KEY","APP_APPEARANCE_CONFIG","channels","selectedSubpanel$","headerTitle","headerSubtitle","headerImage","headerOverlayColor1","headerOverlayColor2","footerTitle","footerSubtitle","footerImage","actions","inputText","inputButton","cta1","cta2","primaryFeatures","array","secondaryFeatures","channelIds","searchControl","results$","selectedChannels$","displayFn","channel","bindToSearchQueryControl","getJson","loadChannels","defaultValues","addFeature","openSubpanel","features","subtitle","description","removeAt","B","newChannels","curr","updateChannels","newChannel","option","debounceTime","distinctUntilChanged","query","switchMap","searchForChannel","results","content_type"],"mappings":"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","file":"x","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {Deselect, Navigate, Select, SetConfig} from '@common/shared/appearance/commands/appearance-commands';\r\nimport {AppearanceCommand} from '@common/shared/appearance/commands/appearance-command';\r\nimport {APPEARANCE_TOKEN} from '@common/shared/appearance/appearance-listener.service';\r\nimport {BehaviorSubject, fromEvent, Observable, ReplaySubject} from 'rxjs';\r\nimport {filter, finalize, share} from 'rxjs/operators';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\nimport {CssThemeColors} from '@common/core/types/models/CssTheme';\r\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\r\nimport {removeDuplicateSlashes} from '@common/core/utils/remove-duplicate-slashes';\r\nimport {AppearanceEditorConfig, AppearanceEditorField} from '@common/admin/appearance/appearance-editor-config.token';\r\nimport deepmerge from 'deepmerge';\r\n\r\nexport interface EditorChanges {\r\n    [key: string]: string|number|object;\r\n    colors?: CssThemeColors;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AppearanceEditor {\r\n    public activePanel$ = new BehaviorSubject<AppearanceEditorField>(null);\r\n    public defaultSettings: {[key: string]: any} = {};\r\n    public initiated$ = new ReplaySubject(1);\r\n    private previewWindow: Window;\r\n\r\n    public loading$ = new BehaviorSubject<boolean>(false);\r\n    private saveRequest: (changes: EditorChanges) => Observable<void>;\r\n    public changes$ = new BehaviorSubject<EditorChanges>(null);\r\n    public config: AppearanceEditorConfig;\r\n\r\n    constructor(\r\n        private settings: Settings,\r\n        private router: Router,\r\n        private http: AppHttpClient,\r\n        private toast: Toast,\r\n    ) {}\r\n\r\n    public addChanges(value: EditorChanges) {\r\n        this.changes$.next({...this.changes$.value, ...value});\r\n    }\r\n    \r\n    public openPanel(name: string) {\r\n        const panel = this.config.sections.find(value => {\r\n            return slugifyString(value.name) === name;\r\n        });\r\n        this.activePanel$.next(panel);\r\n        this.navigate(panel);\r\n    }\r\n\r\n    public init(iframe: HTMLIFrameElement, defaultSettings: {name: string, value: any}[], config: AppearanceEditorConfig[]) {\r\n        // listen for 'initiated' event from iframe window\r\n        fromEvent(window, 'message')\r\n            .pipe(filter((e: MessageEvent) => {\r\n                return e.data === APPEARANCE_TOKEN && (new URL(e.origin).hostname) === window.location.hostname;\r\n            })).subscribe(() => {\r\n                this.initiated$.next(true);\r\n                this.initiated$.complete();\r\n                if (this.activePanel$.value) {\r\n                    this.navigate(this.activePanel$.value);\r\n                }\r\n            });\r\n\r\n        defaultSettings.forEach(setting => {\r\n            if (setting.name === 'env') {\r\n                this.defaultSettings = {...this.defaultSettings, ...setting.value};\r\n            } else {\r\n                this.defaultSettings[setting.name] = setting.value;\r\n            }\r\n        });\r\n\r\n        this.initConfig(config);\r\n        this.initIframe(iframe);\r\n        return this.initiated$;\r\n    }\r\n\r\n    public saveChanges(changes?: EditorChanges): Observable<unknown> {\r\n        if (changes) {\r\n            this.addChanges(changes);\r\n        }\r\n        this.loading$.next(true);\r\n        const request = this.saveRequest ?\r\n            this.saveRequest :\r\n            c => this.http.post<GenericBackendResponse<any>>('admin/appearance', c);\r\n        const observable = request(this.changes$.value)\r\n            .pipe(\r\n                finalize(() => this.loading$.next(false)),\r\n                share()\r\n            );\r\n            observable.subscribe(() => {\r\n                this.changes$.next(null);\r\n                this.toast.open('Appearance saved');\r\n            });\r\n        return observable;\r\n    }\r\n\r\n    public setSaveRequest(request: (changes: EditorChanges) => Observable<void>) {\r\n        this.saveRequest = request;\r\n    }\r\n\r\n    public closeActivePanel() {\r\n        this.router.navigate(['/admin/appearance']);\r\n    }\r\n\r\n    public navigate(panelConfig: AppearanceEditorField) {\r\n        const route = panelConfig?.route || this.config.defaultRoute;\r\n        this.postMessage(new Navigate(route, panelConfig?.queryParams));\r\n    }\r\n\r\n    public setConfig(key: string, value: string|number) {\r\n        this.postMessage(new SetConfig(key, value));\r\n    }\r\n\r\n    public selectNode(selector: string, index = 0) {\r\n        if ( ! selector) return;\r\n        this.postMessage(new Select(selector, index));\r\n    }\r\n\r\n    public deselectNode() {\r\n        this.postMessage(new Deselect());\r\n    }\r\n\r\n    public postMessage(command: AppearanceCommand) {\r\n        this.previewWindow.postMessage(command, '*');\r\n    }\r\n\r\n    public currentValue(key: string) {\r\n        if (key.startsWith('env.') || key.startsWith('custom-code.')) {\r\n            return this.defaultSettings[key];\r\n        } else {\r\n            return this.settings.get(key);\r\n        }\r\n    }\r\n\r\n    private initConfig(config: AppearanceEditorConfig[]) {\r\n        const merged = deepmerge.all(config) as AppearanceEditorConfig;\r\n        merged.sections = merged.sections.sort((a, b) => (a.position > b.position) ? 1 : -1);\r\n        if ( ! merged.defaultRoute) merged.defaultRoute = '/';\r\n        this.config = merged;\r\n    }\r\n\r\n    private initIframe(iframe: HTMLIFrameElement) {\r\n        const url = this.settings.getBaseUrl() + this.config.defaultRoute + `?be-preview-mode=${APPEARANCE_TOKEN}`;\r\n        iframe.src = removeDuplicateSlashes(url);\r\n        this.previewWindow = iframe.contentWindow;\r\n    }\r\n}\r\n","import {InjectionToken} from '@angular/core';\r\nimport {ComponentType} from '@angular/cdk/portal';\r\nimport {Params} from '@angular/router';\r\n\r\nexport interface AppearanceEditorConfig {\r\n    navigationRoutes: string[];\r\n    defaultRoute?: string;\r\n    sections?: AppearanceEditorField[];\r\n    menus: {\r\n        availableRoutes: string[],\r\n        positions?: string[],\r\n    };\r\n}\r\n\r\nexport interface AppearanceEditorField {\r\n    name: string;\r\n    component?: ComponentType<any>;\r\n    position?: number;\r\n    route?: string;\r\n    queryParams?: Params;\r\n}\r\n\r\nexport const APPEARANCE_EDITOR_CONFIG = new InjectionToken<AppearanceEditorConfig[]>('APPEARANCE_EDITOR_CONFIG');\r\n\r\nexport const DEFAULT_APPEARANCE_EDITOR_CONFIG: AppearanceEditorConfig = {\r\n    navigationRoutes: [],\r\n    menus: {\r\n        availableRoutes: [\r\n            'login',\r\n            'register',\r\n            'contact',\r\n            'billing/pricing',\r\n            'account-settings',\r\n            'admin/appearance',\r\n            'admin/users',\r\n            'admin/settings/authentication',\r\n            'admin/settings/branding',\r\n            'admin/settings/cache',\r\n            'admin/settings/providers',\r\n            'admin/roles',\r\n        ],\r\n        positions: [\r\n            'admin-navbar',\r\n            'custom-page-navbar',\r\n            'auth-page-footer',\r\n        ]\r\n    },\r\n    sections: [\r\n        {name: 'general', position: 1},\r\n        {name: 'themes', position: 2},\r\n        {name: 'menus', position: 3},\r\n        {name: 'custom-code', position: 4},\r\n        {name: 'seo-settings', position: 5}\r\n    ]\r\n};\r\n","import { AppearanceCommand } from './appearance-command';\r\nimport { CommandTypes } from './command-types';\r\nimport {Params} from '@angular/router';\r\n\r\nexport class Navigate implements AppearanceCommand {\r\n    type = CommandTypes.Navigate;\r\n    constructor(public route: string, public queryParams: Params) {}\r\n}\r\n\r\nexport class SetConfig implements AppearanceCommand {\r\n    type = CommandTypes.SetConfig;\r\n    constructor(public key: string, public value: string|number) {}\r\n}\r\n\r\nexport class Select implements AppearanceCommand {\r\n    type = CommandTypes.Select;\r\n    constructor(public selector: string, public index = 0) {}\r\n}\r\n\r\nexport class Deselect implements AppearanceCommand {\r\n    type = CommandTypes.Deselect;\r\n}\r\n\r\nexport class SetColors implements AppearanceCommand {\r\n    type = CommandTypes.SetColors;\r\n    constructor(public key: string, public value: string) {}\r\n}\r\n\r\nexport class SetCustomCss implements AppearanceCommand {\r\n    type = CommandTypes.SetCustomCss;\r\n    constructor(public content: string) {}\r\n}\r\n\r\nexport class SetCustomHtml implements AppearanceCommand {\r\n    type = CommandTypes.SetCustomHtml;\r\n    constructor(public content: string) {}\r\n}\r\n\r\nexport type AllCommands = Navigate | SetConfig | Select;\r\n","export function removeDuplicateSlashes(url: string): string {\r\n    return url.replace(/([^:]\\/)\\/+/g, '$1');\r\n}\r\n","<div class=\"back-button\" (click)=\"back.emit()\">\r\n    <mat-icon svgIcon=\"keyboard-arrow-left\"></mat-icon>\r\n</div>\r\n<div class=\"title\">\r\n    <div class=\"static\" trans>Customizing</div>\r\n    <div class=\"path\">\r\n        <ng-container *ngFor=\"let item of path; last as isLast; first as isFirst;\">\r\n            <span *ngIf=\"item\">\r\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"separator\" *ngIf=\"!isFirst\"></mat-icon>\r\n                <span class=\"name\" [class.last]=\"isLast\" trans>{{viewName(item)}}</span>\r\n            </span>\r\n        </ng-container>\r\n    </div>\r\n</div>","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {snakeCase} from '@common/core/utils/snake-case';\r\n\r\n@Component({\r\n    selector: 'appearance-panel-meta',\r\n    templateUrl: './appearance-panel-meta.component.html',\r\n    styleUrls: ['./appearance-panel-meta.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppearancePanelMetaComponent {\r\n    @Input() path: string[] = [];\r\n    @Output() back = new EventEmitter();\r\n\r\n    public viewName(name: string) {\r\n        return snakeCase(name).replace(/_/g , ' ');\r\n    }\r\n}\r\n","<div class=\"field-container\" (click)=\"openModal()\">\r\n    <div class=\"label fake-label\" trans><ng-content></ng-content></div>\r\n    <div class=\"img-container\">\r\n        <image-or-icon [src]=\"image\" *ngIf=\"image$ | async as image; else noImage\"></image-or-icon>\r\n\r\n        <ng-template #noImage>\r\n            <div class=\"no-image\">\r\n                <mat-icon svgIcon=\"photo-size-select-actual\"></mat-icon>\r\n                <span class=\"text\" trans>Upload</span>\r\n            </div>\r\n        </ng-template>\r\n\r\n        <div class=\"actions-dropdown\">\r\n            <button class=\"no-style\" [matMenuTriggerFor]=\"actionsMenu\" (click)=\"$event.stopPropagation()\"><mat-icon svgIcon=\"settings\" class=\"trigger-icon\"></mat-icon></button>\r\n\r\n            <mat-menu #actionsMenu>\r\n                <div mat-menu-item (click)=\"remove()\" *ngIf=\"image$ | async\" trans>Remove</div>\r\n                <div mat-menu-item (click)=\"useDefault()\" *ngIf=\"defaultValue\" trans>Use Default</div>\r\n            </mat-menu>\r\n        </div>\r\n    </div>\r\n</div>\r\n<mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"loading$ | async\"></mat-progress-bar>\r\n","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Directive({\n    selector: '[highlightInPreview]'\n})\nexport class HighlightInPreviewDirective implements OnInit {\n    @Input('highlightInPreview') selector: string;\n\n    constructor(\n        private el: ElementRef<HTMLElement>,\n        private editor: AppearanceEditor,\n    ) {}\n\n    public ngOnInit(): void {\n        this.el.nativeElement.addEventListener('focus', () => {\n            this.editor.selectNode(this.selector);\n        });\n\n        this.el.nativeElement.addEventListener('blur', () => {\n            this.editor.deselectNode();\n        });\n    }\n}\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\nimport {AppearanceImageUploadValidator} from '@common/admin/appearance/appearance-image-input/appearance-image-upload-validator';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {randomString} from '@common/core/utils/random-string';\r\nimport {finalize} from 'rxjs/operators';\r\nimport { UploadUri } from '@common/uploads/types/upload-uri.enum';\r\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\r\n\r\n@Component({\r\n    selector: 'appearance-image-input',\r\n    templateUrl: './appearance-image-input.component.html',\r\n    styleUrls: ['./appearance-image-input.component.scss'],\r\n    host: {'tabindex': '0'},\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [UploadQueueService, {\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: AppearanceImageInputComponent,\r\n        multi: true,\r\n    }]\r\n})\r\nexport class AppearanceImageInputComponent implements ControlValueAccessor {\r\n    @Input() defaultValue: string;\r\n    @Input() backendUri: string;\r\n    @Input() diskPrefix: string;\r\n    private propagateChange: Function;\r\n    public image$ = new BehaviorSubject(null);\r\n    public loading$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        private editor: AppearanceEditor,\r\n        private uploadQueue: UploadQueueService,\r\n        private validator: AppearanceImageUploadValidator,\r\n        public settings: Settings,\r\n    ) {\r\n        this.validator.showToast = true;\r\n    }\r\n\r\n    public openModal() {\r\n        const params: UploadApiConfig = {\r\n            uri: this.backendUri || UploadUri.Image,\r\n            httpParams: {diskPrefix: this.diskPrefix},\r\n            validator: this.validator,\r\n        };\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(files => {\r\n            this.loading$.next(true);\r\n            this.uploadQueue.start(files, params)\r\n                .pipe(finalize(() => this.loading$.next(false)))\r\n                .subscribe(response => {\r\n                    this.updateValue(response.fileEntry.url);\r\n                });\r\n        });\r\n    }\r\n\r\n    public remove() {\r\n        this.updateValue(null);\r\n    }\r\n\r\n    public useDefault() {\r\n        this.updateValue(this.defaultValue);\r\n    }\r\n\r\n    private updateValue(value?: string) {\r\n        this.propagateChange(value);\r\n        // make sure new image is loaded by browser as path will be the same\r\n        this.image$.next(value + `?v=${randomString(8)}`);\r\n    }\r\n\r\n    public writeValue(value: string) {\r\n        this.image$.next(value);\r\n    }\r\n\r\n    public registerOnChange(fn: Function) {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    public registerOnTouched() {}\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Component({\n    selector: 'general-appearance-panel',\n    templateUrl: './general-appearance-panel.component.html',\n    styleUrls: ['./general-appearance-panel.component.scss'],\n    host: {'class': 'appearance-panel'},\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeneralAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'branding.logo_light': [''],\n        'branding.logo_dark': [''],\n        'branding.favicon': [''],\n        'env.app_name': [''],\n        'branding.site_description': [''],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public editor: AppearanceEditor,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n          defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n\n    public defaultValue(key: string) {\n        return this.editor.defaultSettings[key];\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\n\nconst BASE_URI = 'css-theme';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CssThemeService {\n    constructor(private http: AppHttpClient) {}\n\n    public all(): PaginatedBackendResponse<CssTheme> {\n        return this.http.get(BASE_URI);\n    }\n\n    public create(params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.post(BASE_URI, params);\n    }\n\n    public update(id, params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.put(`${BASE_URI}/${id}`, params);\n    }\n\n    public delete(ids: number[]): BackendResponse<void> {\n        return this.http.delete(`${BASE_URI}/${ids}`);\n    }\n}\n","<appearance-panel-meta [path]=\"['General']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_light')\" formControlName=\"branding.logo_light\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #1 (For top navbar)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_dark')\" formControlName=\"branding.logo_dark\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #2 (Everywhere else)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.favicon')\" backendUri=\"uploads/favicon\" diskPrefix=\"branding_media\" formControlName=\"branding.favicon\">\n        Favicon\n    </appearance-image-input>\n\n    <div class=\"input-container\">\n        <label for=\"env.app_name\" trans>Site Name</label>\n        <input type=\"text\" id=\"env.app_name\" [placeholder]=\"defaultValue('env.app_name')\" formControlName=\"env.app_name\">\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"branding.site_description\" trans>Site Description</label>\n        <textarea id=\"branding.site_description\" [placeholder]=\"defaultValue('branding.site_description')\" rows=\"4\" formControlName=\"branding.site_description\"></textarea>\n    </div>\n</div>\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title>\n        <span *ngIf=\"data.theme\" trans>Update Theme</span>\n        <span *ngIf=\"!data.theme\" trans>Create Theme</span>\n    </h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" ngNativeValidate [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <mat-dialog-content class=\"many-inputs\">\n        <div class=\"input-container\">\n            <label for=\"name\" trans>Name</label>\n            <input type=\"text\" id=\"name\" formControlName=\"name\" required minlength=\"3\">\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"is_dark\" formControlName=\"is_dark\" trans>Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme has light text on dark background.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_dark\" formControlName=\"default_dark\" trans>Default Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default dark theme.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_light\" formControlName=\"default_light\" trans>Default Light Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default light theme.</p>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n            <span *ngIf=\"data.theme; else creating\">Update</span>\n            <ng-template #creating>\n                <span>Create</span>\n            </ng-template>\n        </button>\n    </mat-dialog-actions>\n</form>\n\n\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {FormBuilder} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {filter} from 'rxjs/operators';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\n\ninterface CrupdateCssThemeModalData {\n    theme: CssTheme;\n}\n\n@Component({\n    selector: 'crupdate-css-theme-modal',\n    templateUrl: './crupdate-css-theme-modal.component.html',\n    styleUrls: ['./crupdate-css-theme-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateCssThemeModalComponent {\n    public loading$ = new BehaviorSubject(false);\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<CssTheme>]: string}>({});\n    public form = this.fb.group({\n        name: [''],\n        is_dark: [false],\n        default_dark: [false],\n        default_light: [false],\n    });\n\n    constructor(\n        private dialogRef: MatDialogRef<CrupdateCssThemeModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCssThemeModalData,\n        private cssTheme: CssThemeService,\n        private toast: Toast,\n        private fb: FormBuilder,\n    ) {\n        if (data.theme) {\n            this.form.patchValue(data.theme);\n        }\n\n        // make sure \"default_light\" and \"default_dark\"\n        // can't be toggled on at the same time\n        this.form.get('default_dark')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_light').setValue(false);\n            });\n        this.form.get('default_light')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_dark').setValue(false);\n            });\n    }\n\n    public confirm() {\n        const request = this.data.theme ?\n            this.cssTheme.update(this.data.theme.id, this.form.value) :\n            this.cssTheme.create(this.form.value);\n        request.subscribe(response => {\n            this.toast.open(this.data.theme ? 'Theme updated' : 'Theme created');\n            this.close(response.theme);\n        }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\n    }\n\n    public close(theme?: CssTheme) {\n        this.dialogRef.close(theme);\n    }\n}\n","import {ChangeDetectionStrategy, Component, ElementRef, OnDestroy} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BOTTOM_POSITION} from '@common/core/ui/overlay-panel/positions/bottom-position';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\n\n@Component({\n    selector: 'color-picker-input',\n    templateUrl: './color-picker-input.component.html',\n    styleUrls: ['./color-picker-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: ColorPickerInputComponent,\n        multi: true,\n    }]\n})\nexport class ColorPickerInputComponent implements OnDestroy, ControlValueAccessor {\n    private pickerSub: Subscription;\n    public propagateChange: Function;\n    public color$ = new BehaviorSubject(null);\n\n    constructor(\n        private overlayPanel: OverlayPanel,\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.pickerSub && this.pickerSub.unsubscribe();\n    }\n\n    public writeValue(value: string) {\n        this.color$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public async openColorPicker(e: MouseEvent) {\n        const { BeColorPickerModule } = await import('@common/core/ui/color-picker/be-color-picker.module');\n        this.pickerSub = this.overlayPanel.open(\n            BeColorPickerModule.components.panel,\n            {\n                origin: new ElementRef(e.target),\n                position: BOTTOM_POSITION,\n                data: {color: this.color$.value}\n            }\n        ).valueChanged().subscribe(color => {\n            this.color$.next(color);\n            this.propagateChange(this.color$.value);\n        });\n    }\n}\n","<button type=\"button\" class=\"no-style color-picker-btn\" (click)=\"openColorPicker($event)\">\n    <mat-icon svgIcon=\"drop-custom\" class=\"color-icon\" [style.color]=\"color$ | async\"></mat-icon>\n    <span class=\"name\" trans><ng-content></ng-content></span>\n    <span class=\"change\" trans>Change</span>\n</button>","<ul [formGroup]=\"form\">\n    <li *ngFor=\"let color of theme.colors | keyvalue\">\n        <color-picker-input [formControlName]=\"color.key\" trans>{{viewName(color.key)}}</color-picker-input>\n    </li>\n</ul>\n","import {ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CssTheme, CssThemeColors} from '@common/core/types/models/CssTheme';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {SetColors} from '@common/shared/appearance/commands/appearance-commands';\nimport {AppearanceEditor, EditorChanges} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\n\n@Component({\n    selector: 'css-theme-colors-panel',\n    templateUrl: './css-theme-colors-panel.component.html',\n    styleUrls: ['./css-theme-colors-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CssThemeColorsPanelComponent implements OnInit, OnDestroy {\n    @Input() theme: CssTheme;\n    public form = new FormGroup({});\n    private colorCache: CssThemeColors = {};\n\n    constructor(\n        private editor: AppearanceEditor,\n        private themes: CssThemeService,\n    ) {}\n\n    ngOnInit() {\n        this.editor.setSaveRequest(this.saveColors.bind(this));\n\n        // build form\n        Object.entries(this.theme.colors).forEach(([name, color]) => {\n            this.form.addControl(name, new FormControl(color));\n        });\n\n        this.editor.initiated$.subscribe(() => {\n            this.setColors(this.theme.colors);\n            this.form.valueChanges.subscribe((value: CssThemeColors) => {\n                this.setColors(value);\n                this.editor.addChanges({'colors': value});\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.editor.setSaveRequest(null);\n    }\n\n    private saveColors(payload: EditorChanges) {\n        return this.themes.update(this.theme.id, payload);\n    }\n\n    private setColors(colors: CssThemeColors) {\n        Object.entries(colors).forEach(([name, color]) => {\n            // make sure we only set colors that actually changed\n            // to keep performance as good as possible\n            if (this.colorCache[name] !== color) {\n                this.editor.postMessage(new SetColors(name, color));\n                this.colorCache[name] = color;\n            }\n        });\n    }\n\n    public viewName(name: string) {\n        return name.replace('be-', '').replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\r\n\r\n<div class=\"appearance-panel-content\">\r\n    <css-theme-colors-panel\r\n            [theme]=\"selectedTheme\"\r\n            *ngIf=\"selectedTheme$ | async as selectedTheme else themesList\"\r\n    ></css-theme-colors-panel>\r\n\r\n    <ng-template #themesList>\r\n        <button mat-raised-button color=\"accent\" type=\"button\" class=\"new-theme-button\" (click)=\"openCrupdateThemeModal()\" trans>New Theme</button>\r\n        <ul>\r\n            <li class=\"nav-item\" *ngFor=\"let theme of loadedThemes$ | async\" (click)=\"setSelectedTheme(theme)\">\r\n                <div class=\"name\">{{theme.name}}</div>\r\n                <div class=\"actions\" (click)=\"$event.stopPropagation()\">\r\n                    <button mat-icon-button type=\"button\" (click)=\"setSelectedTheme(theme)\">\r\n                        <mat-icon svgIcon=\"drop-custom\"></mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button type=\"button\" (click)=\"openCrupdateThemeModal(theme);\">\r\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button type=\"button\" (click)=\"maybeDeleteThemeModal(theme)\">\r\n                        <mat-icon svgIcon=\"delete\"></mat-icon>\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </ng-template>\r\n</div>\r\n\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {CrupdateCssThemeModalComponent} from '@common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n    selector: 'themes-appearance-panel',\n    templateUrl: './themes-appearance-panel.component.html',\n    styleUrls: ['./themes-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemesAppearancePanelComponent implements OnInit, OnDestroy {\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public loadedThemes$ = new BehaviorSubject<CssTheme[]>([]);\n    public selectedTheme$ = new BehaviorSubject<CssTheme>(null);\n    private querySub: Subscription;\n\n    public path$ = this.selectedTheme$.pipe(map(theme => {\n        const path = ['Themes'];\n        if (theme) path.push(theme.name);\n        return path;\n    }));\n\n    constructor(\n        public appearance: AppearanceEditor,\n        private modal: Modal,\n        private themes: CssThemeService,\n        private toast: Toast,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.reloadThemes();\n    }\n\n    ngOnDestroy() {\n        this.querySub && this.querySub.unsubscribe();\n    }\n\n    public openCrupdateThemeModal(theme?: CssTheme) {\n        this.modal.open(CrupdateCssThemeModalComponent, {theme})\n            .afterClosed()\n            .subscribe(newTheme => {\n                if (newTheme) {\n                    this.reloadThemes();\n                }\n            });\n    }\n\n    public setSelectedTheme(theme?: CssTheme) {\n        this.router.navigate([], {queryParams: {theme: theme && theme.id}, queryParamsHandling: 'merge'});\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedTheme$.value) {\n            this.setSelectedTheme();\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public maybeDeleteThemeModal(theme: CssTheme) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Theme',\n            body:  'Are you sure you want to delete this theme?',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.deleteTheme(theme);\n        });\n    }\n\n    private reloadThemes() {\n        this.loading$.next(true);\n        this.themes.all()\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.loadedThemes$.next(response.pagination.data);\n                this.bindToQueryParams();\n            });\n    }\n\n    private deleteTheme(theme: CssTheme) {\n        this.themes.delete([theme.id]).subscribe(() => {\n            this.toast.open('Theme deleted');\n            this.reloadThemes();\n        });\n    }\n\n    private bindToQueryParams() {\n        if (this.querySub) return;\n        this.querySub = this.route.queryParams.subscribe((params: {theme?: string}) => {\n            const theme = this.loadedThemes$.value.find(t => t.id === +params.theme);\n            this.selectedTheme$.next(theme);\n        });\n    }\n}\n","import {Injectable} from '@angular/core';\r\nimport {moveItemInArray} from '@angular/cdk/drag-drop';\r\nimport {Menu} from '@common/core/ui/custom-menu/menu';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MenuEditor {\r\n    public allMenus$ = new BehaviorSubject< Menu[]>([]);\r\n    public activeMenu$ = new BehaviorSubject<Menu>(null);\r\n\r\n    constructor(\r\n        private settings: Settings,\r\n        private appearance: AppearanceEditor,\r\n    ) {}\r\n\r\n    public create() {\r\n        const allMenus = [...this.allMenus$.value];\r\n        this.activeMenu$.next(new Menu({name: 'New Menu'}));\r\n        allMenus.push(this.activeMenu$.value);\r\n        this.allMenus$.next(allMenus);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public reorderActiveMenuItems(previousIndex: number, currentIndex: number) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        moveItemInArray(activeMenu.items, previousIndex, currentIndex);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public deleteActive() {\r\n        const allMenus = [...this.allMenus$.value];\r\n        const i = allMenus.indexOf(this.activeMenu$.value);\r\n        allMenus.splice(i, 1);\r\n        this.activeMenu$.next(null);\r\n        this.allMenus$.next(allMenus);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public addItem(item: MenuItem) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        item = this.transformLocalLinksToRoutes(item);\r\n        activeMenu.items.push(item);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public removeItem(item: MenuItem) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        const i = this.activeMenu$.value.items.indexOf(item);\r\n        activeMenu.items.splice(i, 1);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    private transformLocalLinksToRoutes(item: MenuItem): MenuItem {\r\n        const baseUrl = this.settings.getBaseUrl();\r\n\r\n        if (item.type !== 'link' || item.action.indexOf(baseUrl) === -1) return item;\r\n\r\n        item.type = 'route';\r\n        item.action = item.action.replace(this.settings.getBaseUrl(), '');\r\n        return item;\r\n    }\r\n\r\n    public commitChanges() {\r\n        const menus = JSON.stringify(this.allMenus$.value);\r\n        this.appearance.setConfig('menus', menus);\r\n        this.appearance.addChanges({'menus': menus});\r\n    }\r\n\r\n    public setFromJson(json: string) {\r\n        if ( ! json) return;\r\n        const menus = JSON.parse(json);\r\n\r\n        if ( ! menus) return;\r\n\r\n        const allMenus = menus.map(menuData => {\r\n            const menu = new Menu(menuData);\r\n            menu.items = menu.items.map(item => new MenuItem(item));\r\n            return menu;\r\n        });\r\n        this.allMenus$.next(allMenus);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuItemCategoriesService {\n    constructor(private http: HttpCacheClient) {}\n\n    public get(): BackendResponse<{categories: MenuItemCategory[]}> {\n        return this.http.getWithCache('admin/appearance/menu-categories');\n    }\n}\n","export class MenuItem {\r\n    id: number|string;\r\n    label: string;\r\n    action: string;\r\n\r\n    // ID for model if action matches to specific model. If action\r\n    // points to a specific custom page, model_id will be that page's ID.\r\n    model_id: number;\r\n    type: 'page' | 'link' | 'route' = 'link';\r\n    order = 1;\r\n    icon: string;\r\n    condition: MenuItemCondition = null;\r\n    target: string = null;\r\n    position = 0;\r\n    activeExact = false;\r\n\r\n    constructor(params: Partial<MenuItem> = {}) {\r\n        for (const name in params) {\r\n            this[name] = params[name];\r\n        }\r\n        this.id = Math.floor(Math.random() * (1000 - 1));\r\n    }\r\n}\r\n\r\nexport type MenuItemCondition = string|string[]|Function;\r\n","<div class=\"header\">\r\n    <span class=\"title\" trans>New Menu Item</span>\r\n    <mat-icon svgIcon=\"close\" (click)=\"close()\"></mat-icon>\r\n</div>\r\n<div class=\"new-item-tabs\">\r\n    <mat-accordion>\r\n        <form (ngSubmit)=\"addLinkMenuItem()\" [formGroup]=\"linkForm\" ngNativeValidate>\r\n            <mat-expansion-panel class=\"mat-elevation-z\">\r\n                <mat-expansion-panel-header><mat-panel-title trans>Link</mat-panel-title></mat-expansion-panel-header>\r\n                <div class=\"many-inputs expansion-panel-content\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"external-link-url\" trans>URL</label>\r\n                        <input type=\"url\" id=\"external-link-url\" formControlName=\"action\" required>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"external-link-text\" trans>Link Text</label>\r\n                        <input type=\"text\" id=\"external-link-text\" formControlName=\"label\" required>\r\n                    </div>\r\n                </div>\r\n                <mat-action-row>\r\n                    <button mat-button color=\"accent\" type=\"submit\" trans>Add</button>\r\n                </mat-action-row>\r\n            </mat-expansion-panel>\r\n        </form>\r\n        <mat-expansion-panel class=\"mat-elevation-z\">\r\n            <mat-expansion-panel-header><mat-panel-title trans>Route</mat-panel-title></mat-expansion-panel-header>\r\n            <div class=\"items-list expansion-panel-content\">\r\n                <div class=\"item\" *ngFor=\"let route of appearance.config.menus.availableRoutes\"\r\n                     (click)=\"addRouteMenuItem(route)\">{{route}}\r\n                </div>\r\n            </div>\r\n        </mat-expansion-panel>\r\n        <mat-expansion-panel class=\"mat-elevation-z\" *ngFor=\"let category of menuItemCategories\">\r\n            <mat-expansion-panel-header><mat-panel-title trans>{{category.name}}</mat-panel-title></mat-expansion-panel-header>\r\n            <div class=\"items-list expansion-panel-content\">\r\n                <div class=\"item\" *ngFor=\"let item of category.items\" (click)=\"addCustomMenuItem(item)\">{{item.label}}</div>\r\n            </div>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n</div>","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\r\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {FormBuilder} from '@angular/forms';\r\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\r\nimport {MenuItemCategoriesService} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service';\r\n\r\n@Component({\r\n    selector: 'add-menu-item-panel',\r\n    templateUrl: './add-menu-item-panel.component.html',\r\n    styleUrls: ['./add-menu-item-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddMenuItemPanelComponent implements OnInit {\r\n    public linkForm = this.fb.group({\r\n        action: [''],\r\n        label: [''],\r\n    });\r\n    public menuItemCategories: MenuItemCategory[];\r\n\r\n    constructor(\r\n        public editor: MenuEditor,\r\n        public appearance: AppearanceEditor,\r\n        private overlayPanelRef: OverlayPanelRef,\r\n        private fb: FormBuilder,\r\n        private itemCategories: MenuItemCategoriesService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.itemCategories.get().subscribe(response => {\r\n            this.menuItemCategories = response.categories;\r\n        });\r\n    }\r\n\r\n    public addLinkMenuItem() {\r\n        this.editor.addItem(new MenuItem({\r\n            type: 'link',\r\n            label: this.linkForm.value.label,\r\n            action: this.linkForm.value.action,\r\n        }));\r\n\r\n        this.linkForm.reset();\r\n        this.close();\r\n    }\r\n\r\n    public addRouteMenuItem(route: string) {\r\n        this.editor.addItem(new MenuItem({\r\n            type: 'route',\r\n            label: route,\r\n            action: route,\r\n        }));\r\n        this.close();\r\n    }\r\n\r\n    public addCustomMenuItem(item: Partial<MenuItem>) {\r\n        this.editor.addItem(new MenuItem(item));\r\n        this.close();\r\n    }\r\n\r\n    public close() {\r\n        this.overlayPanelRef.close();\r\n    }\r\n}\r\n","<button mat-icon-button (click)=\"selectIcon(icon)\" *ngFor=\"let icon of icons$ | async\">\n  <mat-icon [svgIcon]=\"icon\"></mat-icon>\n</button>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Component({\n    selector: 'icon-selector',\n    templateUrl: './icon-selector.component.html',\n    styleUrls: ['./icon-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconSelectorComponent implements OnInit {\n    public icons$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n    public loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    @Output() iconSelected = new EventEmitter<string>();\n\n    constructor(\n        private http: HttpCacheClient,\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    ngOnInit() {\n        this.loading$.next(true);\n        this.http.get<GenericBackendResponse<{icons: string[]}>>('admin/icons')\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.icons$.next(response.icons);\n            });\n    }\n\n    public selectIcon(icon: string) {\n        // component is used inline\n        if (this.iconSelected.observers.length) {\n            this.iconSelected.next(icon);\n        // component is used as overlay panel\n        } else {\n            this.overlayPanelRef.emitValue(icon);\n            this.overlayPanelRef.close();\n        }\n\n    }\n}\n","<div class=\"title\" trans>Menu Items</div>\r\n\r\n<mat-accordion cdkDropList (cdkDropListDropped)=\"reorderMenuItems($event)\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else noActiveMenu\">\r\n    <mat-expansion-panel\r\n            class=\"mat-elevation-z menu-item-container\"\r\n            cdkDrag\r\n            *ngFor=\"let menuItem of activeMenu.items\"\r\n            (opened)=\"toggleMenuItem(menuItem)\"\r\n            (closed)=\"toggleMenuItem(menuItem)\"\r\n            [attr.data-id]=\"menuItem.id\"\r\n    >\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n                <mat-icon class=\"drag-handle\" cdkDragHandle svgIcon=\"drag-handle\"></mat-icon>\r\n                <span class=\"name\">{{menuItem.label}}</span>\r\n            </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n\r\n        <div class=\"many-inputs menu-item-list\">\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-label'}}\" trans>Label</label>\r\n                <input type=\"text\" [(ngModel)]=\"menuItem.label\" id=\"{{menuItem.id + '-label'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-type'}}\" trans>Type</label>\r\n                <select [(ngModel)]=\"menuItem.type\" id=\"{{menuItem.id + '-type'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option value=\"link\" trans>Link</option>\r\n                    <option value=\"route\" trans>Route</option>\r\n                    <option value=\"page\" trans>Page</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-action'}}\" trans>Action</label>\r\n                <input type=\"text\" [(ngModel)]=\"menuItem.action\" id=\"{{menuItem.id + '-action'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-condition'}}\" trans>Condition</label>\r\n                <select [(ngModel)]=\"menuItem.condition\" id=\"{{menuItem.id + '-condition'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option [ngValue]=\"null\" trans>None</option>\r\n                    <option value=\"auth\" trans>Show to Logged in Users Only</option>\r\n                    <option value=\"guest\" trans>Show to Guest Users Only</option>\r\n                    <option value=\"admin\" trans>Show to Admin Only</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-target'}}\" trans>Open link in</label>\r\n                <select [(ngModel)]=\"menuItem.target\" id=\"{{menuItem.id + '-target'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option value=\"_self\" trans>Same Window</option>\r\n                    <option value=\"_blank\" trans>New Window</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container icon-input-container\" #iconInput (click)=\"openIconSelector(iconInput, menuItem)\">\r\n                <label for=\"{{menuItem.id + '-icon'}}\" trans>Icon</label>\r\n                <input type=\"text\" readonly [(ngModel)]=\"menuItem.icon\" id=\"{{menuItem.id + '-icon'}}\" placeholder=\"(Optional)\" trans-placeholder>\r\n                <mat-icon [svgIcon]=\"menuItem.icon\"></mat-icon>\r\n            </div>\r\n        </div>\r\n\r\n        <mat-action-row>\r\n            <button mat-button color=\"warn\" class=\"delete-button\" (click)=\"confirmMenuItemDeletion()\" trans>Remove</button>\r\n        </mat-action-row>\r\n    </mat-expansion-panel>\r\n</mat-accordion>\r\n\r\n<ng-template #noActiveMenu>\r\n    <div class=\"no-menu-items\" trans>This menu has no items yet.</div>\r\n</ng-template>\r\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\r\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\r\n\r\n@Component({\r\n    selector: 'menu-items',\r\n    templateUrl: './menu-items.component.html',\r\n    styleUrls: ['./menu-items.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MenuItemsComponent implements OnDestroy {\r\n    public selectedMenuItem: MenuItem;\r\n    public subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        public menus: MenuEditor,\r\n        private modal: Modal,\r\n        private overlayPanel: OverlayPanel,\r\n        private cd: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => {\r\n            subscription && subscription.unsubscribe();\r\n        });\r\n    }\r\n\r\n    public reorderMenuItems(e: CdkDragDrop<void>) {\r\n        this.menus.reorderActiveMenuItems(e.previousIndex, e.currentIndex);\r\n    }\r\n\r\n    /**\r\n     * Toggle specified menu item settings panel visibility.\r\n     */\r\n    public toggleMenuItem(item: MenuItem) {\r\n        if (this.selectedMenuItem === item) {\r\n            this.selectedMenuItem = null;\r\n        } else {\r\n            this.selectedMenuItem = item;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ask user to confirm menu item deletion.\r\n     */\r\n    public confirmMenuItemDeletion() {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Menu Item',\r\n            body: 'Are you sure you want to delete this menu item?',\r\n            ok: 'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.menus.removeItem(this.selectedMenuItem);\r\n            this.selectedMenuItem = null;\r\n        });\r\n    }\r\n\r\n    public openIconSelector(origin: HTMLElement, menuItem: MenuItem) {\r\n        this.overlayPanel.open(IconSelectorComponent, {\r\n            position: RIGHT_POSITION,\r\n            origin: new ElementRef(origin),\r\n        }).valueChanged().subscribe(icon => {\r\n            menuItem.icon = icon;\r\n            this.menus.commitChanges();\r\n            this.cd.detectChanges();\r\n        });\r\n    }\r\n}\r\n","<appearance-panel-meta [path]=\"['Menus', menus.activeMenu$.value && menus.activeMenu$.value.name]\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\r\n\r\n<div class=\"appearance-panel-content\">\r\n    <div class=\"menu-panel\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else allMenuList\">\r\n        <div class=\"many-inputs menu-settings\">\r\n            <div class=\"input-container\">\r\n                <label for=\"menu-name\" trans>Menu Name</label>\r\n                <input type=\"text\" id=\"menu-name\" [(ngModel)]=\"activeMenu.name\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"menu-position\" trans>Menu Position</label>\r\n                <select id=\"menu-position\" [(ngModel)]=\"activeMenu.position\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option [ngValue]=\"position\" *ngFor=\"let position of appearance.config.menus.positions\">{{getDisplayName(position)}}</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <menu-items></menu-items>\r\n\r\n        <div class=\"action-buttons\">\r\n            <button mat-button color=\"warn\" (click)=\"confirmMenuDeletion()\" trans>Delete Menu</button>\r\n            <button class=\"button flat add-item-button\" mat-button color=\"accent\" (click)=\"openAddItemPanel()\" trans>Add Item</button>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #allMenuList>\r\n        <div class=\"menus\">\r\n            <div class=\"menu nav-item\" *ngFor=\"let menu of menus.allMenus$ | async\" (click)=\"setActiveMenu(menu)\">\r\n                <span class=\"name\">{{menu.name}}</span>\r\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"actions\"></mat-icon>\r\n            </div>\r\n\r\n            <div class=\"action-buttons\">\r\n                <button mat-button color=\"accent\" class=\"button primary\" (click)=\"menus.create()\" trans>Add a Menu</button>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</div>","import {ChangeDetectionStrategy, Component, ElementRef} from '@angular/core';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\r\nimport {AddMenuItemPanelComponent} from '@common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\r\nimport {Menu} from '@common/core/ui/custom-menu/menu';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Component({\r\n    selector: 'menus-appearance-panel',\r\n    templateUrl: './menus-appearance-panel.component.html',\r\n    styleUrls: ['./menus-appearance-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MenusAppearancePanelComponent {\r\n    constructor(\r\n        public appearance: AppearanceEditor,\r\n        public menus: MenuEditor,\r\n        private modal: Modal,\r\n        private settings: Settings,\r\n        private panel: OverlayPanel,\r\n        private el: ElementRef<HTMLElement>,\r\n    ) {\r\n        this.menus.setFromJson(this.settings.get('menus'));\r\n    }\r\n\r\n    public openAddItemPanel() {\r\n        const position = RIGHT_POSITION.slice();\r\n        position[0].offsetX = 10;\r\n        position[1].offsetX = 10;\r\n        this.panel.open(AddMenuItemPanelComponent, {\r\n            position: position,\r\n            origin: this.el,\r\n            panelClass: 'add-menu-item-panel-container'\r\n        });\r\n    }\r\n\r\n    public openPreviousPanel() {\r\n        if (this.menus.activeMenu$.value) {\r\n            this.menus.activeMenu$.next(null);\r\n        } else {\r\n            this.appearance.closeActivePanel();\r\n        }\r\n    }\r\n\r\n    public setActiveMenu(menu: Menu) {\r\n        this.menus.activeMenu$.next(menu);\r\n    }\r\n\r\n    public confirmMenuDeletion() {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Menu',\r\n            body: 'Are you sure you want to delete this menu?',\r\n            ok: 'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.menus.deleteActive();\r\n        });\r\n    }\r\n\r\n    public getDisplayName(name: string) {\r\n        return name.replace(/-/g, ' ');\r\n    }\r\n}\r\n","<appearance-panel-meta [path]=\"['Seo Settings']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <ng-container *ngFor=\"let field of seoFields\">\n        <div class=\"input-container\">\n            <label [for]=\"field.key\" trans>{{field.name}}</label>\n            <textarea type=\"text\" [id]=\"field.key\" [formControlName]=\"field.key\" [placeholder]=\"field.defaultValue\" rows=\"2\"></textarea>\n        </div>\n    </ng-container>\n</div>","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\n\ninterface SeoField {\n    name: string;\n    key: string;\n    defaultValue: string;\n    value: string;\n}\n\n@Component({\n    selector: 'seo-appearance-panel',\n    templateUrl: './seo-appearance-panel.component.html',\n    styleUrls: ['./seo-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeoAppearancePanelComponent implements OnInit {\n    public seoFields: SeoField[];\n    public form = this.fb.group({});\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n    ) {}\n\n    ngOnInit() {\n        this.seoFields = this.editor.defaultSettings['seo_fields'];\n\n        this.seoFields.forEach(field => {\n            this.form.addControl(field.key, this.fb.control(field.value));\n        });\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n}\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title trans>Code Editor</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<mat-dialog-content>\r\n    <div class=\"editor-container\">\r\n        <p class=\"info\" *ngIf=\"data.language === 'html'\" trans>If entering javascript, wrap it with &lt;script>&lt;/script> tag.</p>\r\n        <div class=\"editor\" #editor></div>\r\n    </div>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions>\r\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n    <button type=\"submit\" mat-raised-button color=\"accent\" (click)=\"confirm()\" [disabled]=\"syntaxInvalid$ | async\" trans>Update</button>\r\n</mat-dialog-actions>\r\n\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import {ChangeDetectionStrategy, Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {filter} from 'rxjs/operators';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {LazyLoaderService} from '@common/core/utils/lazy-loader.service';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\ndeclare let ace;\r\n\r\nexport interface CodeEditorModalData {\r\n    contents?: string;\r\n    language: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'code-editor-modal',\r\n    templateUrl: './code-editor-modal.component.html',\r\n    styleUrls: ['./code-editor-modal.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CodeEditorModalComponent implements OnInit {\r\n    @ViewChild('editor', { static: true }) editorEl: ElementRef;\r\n\r\n    public loading$ = new BehaviorSubject<boolean>(false);\r\n    public syntaxInvalid$ = new BehaviorSubject<boolean>(false);\r\n    private editor;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<CodeEditorModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: CodeEditorModalData,\r\n        private lazyLoader: LazyLoaderService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.initEditor(this.data.contents, this.data.language);\r\n        this.overrideDialogCloseEvents();\r\n    }\r\n\r\n    public confirm() {\r\n        this.close(this.editor.getValue());\r\n    }\r\n\r\n    public close(value?: string) {\r\n        this.dialogRef.close(value);\r\n    }\r\n\r\n    private initEditor(contents: string, language = 'html') {\r\n        this.loading$.next(true);\r\n        this.lazyLoader.loadAsset('js/ace/ace.js', {type: 'js'}).then(() => {\r\n            this.editor = ace.edit(this.editorEl.nativeElement);\r\n            this.editor.getSession().setMode('ace/mode/' + language);\r\n            this.editor.setTheme('ace/theme/chrome');\r\n            this.editor.$blockScrolling = Infinity;\r\n            if (contents) this.editor.setValue(contents, 1);\r\n\r\n            this.editor.getSession().on('changeAnnotation', () => {\r\n                const annotations = this.editor.getSession().getAnnotations() as any[];\r\n\r\n                // hide !doctype syntax error\r\n                if (annotations[0] && /doctype first/.test(annotations[0].text)) {\r\n                    annotations.splice(0, 1);\r\n                    this.editor.getSession().setAnnotations(annotations);\r\n                    return;\r\n                }\r\n\r\n                // prevent editor submit if there are syntax errors\r\n                const syntaxInvalid = this.editor\r\n                    .getSession()\r\n                    .getAnnotations()\r\n                    .filter(a => a.type === 'error')\r\n                    .length > 0;\r\n                this.syntaxInvalid$.next(syntaxInvalid);\r\n            });\r\n            this.loading$.next(false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Need to always send dialog data, regardless of how it was closed.\r\n     * Angular material does not provide easy way to do this, so\r\n     * we need to override backdrop click and escape key close events.\r\n     */\r\n    private overrideDialogCloseEvents() {\r\n        this.dialogRef.disableClose = true;\r\n\r\n        // close on backdrop click\r\n        this.dialogRef.backdropClick().subscribe(() => {\r\n            this.close();\r\n        });\r\n\r\n        // close on escape key\r\n        this.dialogRef.keydownEvents()\r\n            .pipe(filter(event => event.keyCode === ESCAPE))\r\n            .subscribe(() => this.close());\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\nimport {CodeEditorModalComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {SetCustomCss, SetCustomHtml} from '@common/shared/appearance/commands/appearance-commands';\n\n@Component({\n    selector: 'custom-code-appearance-panel',\n    templateUrl: './custom-code-appearance-panel.component.html',\n    styleUrls: ['./custom-code-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomCodeAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'custom-code.css': [''],\n        'custom-code.html': [''],\n    });\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n        private modal: Modal,\n        private toast: Toast,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n            defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n    }\n\n    public openModal(type: 'css'|'html') {\n        const key = 'custom-code.' + type;\n        const initialValue = this.form.value[key] || '',\n            params = {contents: this.form.value[key], language: type};\n        this.modal.open(CodeEditorModalComponent, params)\n            .afterClosed()\n            .subscribe(value => {\n                // undefined means user closed modal without clicking \"update\" button\n                if (value === undefined || initialValue === value) return;\n                const newValue = {[key]: value};\n                this.form.patchValue(newValue);\n                this.editor.saveChanges(newValue).subscribe(() => {\n                    this.addCodeToPreview(type, value);\n                    this.toast.open('Custom code saved');\n                });\n            });\n    }\n\n    private addCodeToPreview(type: 'css'|'html', content: string) {\n        if (type === 'css') {\n            this.editor.postMessage(new SetCustomCss(content));\n        } else {\n            this.editor.postMessage(new SetCustomHtml(content));\n        }\n    }\n}\n","<appearance-panel-meta [path]=\"['Custom Code']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n   <button type=\"button\" class=\"nav-item\" (click)=\"openModal('css')\">\n      <span class=\"text\" trans>Custom CSS</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n   <button class=\"nav-item\" (click)=\"openModal('html')\">\n      <span class=\"text\" trans>Custom HTML & Javascript</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n</div>","<mat-sidenav-container>\r\n    <mat-sidenav [opened]=\"!leftColumnIsHidden\" [mode]=\"(breakpoints.isMobile$ | async) ? 'over' : 'side'\" class=\"sidebar\">\r\n        <div class=\"header\">\r\n            <div class=\"back-button\" (click)=\"closeEditor()\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </div>\r\n            <div class=\"title\" trans>Appearance Editor</div>\r\n            <button\r\n                    mat-raised-button\r\n                    color=\"accent\"\r\n                    class=\"button primary save-button\"\r\n                    (click)=\"editor.saveChanges()\"\r\n                    [disabled]=\"!(editor.changes$ | async) || (editor.loading$ | async)\"\r\n            >\r\n                <span *ngIf=\"editor.changes$ | async; else saved\" trans>Save</span>\r\n                <ng-template #saved>\r\n                    <span trans>Saved</span>\r\n                </ng-template>\r\n            </button>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"editor.activePanel$ | async as activePanel; else navigation\">\r\n            <ng-container [ngSwitch]=\"activePanel.name\">\r\n                <general-appearance-panel *ngSwitchCase=\"'general'\"></general-appearance-panel>\r\n                <themes-appearance-panel *ngSwitchCase=\"'themes'\"></themes-appearance-panel>\r\n                <menus-appearance-panel *ngSwitchCase=\"'menus'\"></menus-appearance-panel>\r\n                <seo-appearance-panel *ngSwitchCase=\"'seo-settings'\"></seo-appearance-panel>\r\n                <custom-code-appearance-panel *ngSwitchCase=\"'custom-code'\"></custom-code-appearance-panel>\r\n                <ng-container *ngSwitchDefault>\r\n                    <ng-template *ngIf=\"panelPortal$ | async as portal\" [cdkPortalOutlet]=\"portal\"></ng-template>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <ng-template #navigation>\r\n            <div class=\"root-navigation\">\r\n                <a class=\"nav-item\" [routerLink]=\"[]\" [queryParams]=\"{panel: slugify(section.name)}\" *ngFor=\"let section of editor.config.sections\">\r\n                    <span class=\"text\" trans>{{viewName(section.name)}}</span>\r\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n                </a>\r\n            </div>\r\n        </ng-template>\r\n\r\n    </mat-sidenav>\r\n\r\n    <mat-sidenav-content>\r\n        <div class=\"live-preview\">\r\n            <iframe src=\"about:blank\" #iframe></iframe>\r\n        </div>\r\n    </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n\r\n<button mat-fab (click)=\"toggleLeftSidebar()\" class=\"sidebar-toggle-button\">\r\n    <mat-icon svgIcon=\"edit\"></mat-icon>\r\n</button>","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Inject,\r\n    OnDestroy,\r\n    OnInit,\r\n    Optional,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {AppearanceEditor} from './appearance-editor/appearance-editor.service';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\nimport {Subscription} from 'rxjs';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {map} from 'rxjs/operators';\r\nimport {BreakpointsService} from '@common/core/ui/breakpoints.service';\r\nimport {APPEARANCE_EDITOR_CONFIG, AppearanceEditorConfig} from './appearance-editor-config.token';\r\n\r\n@Component({\r\n    selector: 'appearance',\r\n    templateUrl: './appearance.component.html',\r\n    styleUrls: ['./appearance.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppearanceComponent implements OnInit, OnDestroy {\r\n    @ViewChild('iframe', { static: true }) iframe: ElementRef;\r\n    private routerSub: Subscription;\r\n    public leftColumnIsHidden = false;\r\n\r\n    public panelPortal$ = this.editor.activePanel$.pipe(map(panel => {\r\n        return (panel && panel.component) ? new ComponentPortal(panel.component) : null;\r\n    }));\r\n\r\n    constructor(\r\n        public editor: AppearanceEditor,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        public breakpoints: BreakpointsService,\r\n        @Inject(APPEARANCE_EDITOR_CONFIG) @Optional() public config: AppearanceEditorConfig[],\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.leftColumnIsHidden = this.breakpoints.isMobile$.value;\r\n        this.editor.init(\r\n            this.iframe.nativeElement,\r\n            this.route.snapshot.data.defaultSettings,\r\n            this.config,\r\n        );\r\n        this.routerSub = this.route.queryParams\r\n            .subscribe((params: {panel?: string}) => {\r\n                this.editor.openPanel(params.panel);\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.routerSub && this.routerSub.unsubscribe();\r\n    }\r\n\r\n    public closeEditor() {\r\n        this.router.navigate(['admin']);\r\n    }\r\n\r\n    public slugify(str: string) {\r\n        return slugifyString(str);\r\n    }\r\n\r\n    public viewName(name: string) {\r\n        return name.replace('-', ' ');\r\n    }\r\n\r\n    public toggleLeftSidebar() {\r\n        this.leftColumnIsHidden = !this.leftColumnIsHidden;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {CanDeactivate} from '@angular/router';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CanDeactivateAppearance implements CanDeactivate<AppearanceComponent> {\r\n    constructor(\r\n        private editor: AppearanceEditor,\r\n        private modal: Modal,\r\n    ) {}\r\n\r\n    canDeactivate(): Observable<boolean>|boolean {\r\n        if ( ! this.editor.changes$.value) return true;\r\n\r\n        return this.modal.show(ConfirmModalComponent, {\r\n            title: 'Close Appearance Editor',\r\n            body: 'Are you sure you want to close appearance editor?',\r\n            bodyBold: 'All unsaved changes will be lost.',\r\n            ok: 'Close',\r\n            cancel: 'Stay',\r\n        }).afterClosed();\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {catchError, mergeMap} from 'rxjs/operators';\r\nimport {EMPTY, Observable, of} from 'rxjs';\r\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\r\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AppearanceEditorResolver implements Resolve<GenericBackendResponse<{[key: string]: any}>> {\r\n    constructor(\r\n        private router: Router,\r\n        private http: AppHttpClient\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<GenericBackendResponse<{[key: string]: any}>> {\r\n        return this.http.get<GenericBackendResponse<{[key: string]: any}>>('admin/appearance/values').pipe(\r\n            catchError(() => {\r\n                this.router.navigate(['/admin']);\r\n                return EMPTY;\r\n            }),\r\n            mergeMap(response => {\r\n                if (response) {\r\n                    return of(response);\r\n                } else {\r\n                    this.router.navigate(['/admin']);\r\n                    return EMPTY;\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\n","import {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {CanDeactivateAppearance} from './can-deactivate-appearance.guard';\r\nimport {AuthGuard} from '../../guards/auth-guard.service';\r\nimport {AppearanceEditorResolver} from './appearance-editor/appearance-editor-resolver.service';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AppearanceComponent,\r\n        data: {permissions: ['appearance.update']},\r\n        resolve: {defaultSettings: AppearanceEditorResolver},\r\n        canActivate: [AuthGuard],\r\n        canDeactivate: [CanDeactivateAppearance],\r\n        children: [\r\n            {path: ''},\r\n            {path: ':panel'},\r\n            {path: ':panel/:activeItem'},\r\n        ]\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppearanceRoutingModule {}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n\n@NgModule({\n    declarations: [\n        IconSelectorComponent,\n    ],\n    imports: [\n        CommonModule,\n        LoadingIndicatorModule,\n\n        MatButtonModule,\n        MatIconModule,\n    ],\n    exports: [\n        IconSelectorComponent,\n    ]\n})\nexport class IconSelectorModule {\n}\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {MenusAppearancePanelComponent} from './panels/menus-appearance-panel/menus-appearance-panel.component';\r\nimport {AddMenuItemPanelComponent} from './panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\r\nimport {AppearancePanelMetaComponent} from './appearance-panel-meta/appearance-panel-meta.component';\r\nimport {MenuItemsComponent} from './panels/menus-appearance-panel/menus/menu-items/menu-items.component';\r\nimport {AppearanceRoutingModule} from './appearance-routing.module';\r\nimport {CodeEditorModalComponent} from './panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\r\nimport {ThemesAppearancePanelComponent} from './panels/themes-appearance-panel/themes-appearance-panel.component';\r\nimport {CrupdateCssThemeModalComponent} from './panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\r\nimport {CssThemeColorsPanelComponent} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component';\r\nimport {GeneralAppearancePanelComponent} from '@common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component';\r\nimport {HighlightInPreviewDirective} from './highlight-in-preview.directive';\r\nimport {SeoAppearancePanelComponent} from '@common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component';\r\nimport {CustomCodeAppearancePanelComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component';\r\nimport {AppearanceImageInputComponent} from '@common/admin/appearance/appearance-image-input/appearance-image-input.component';\r\nimport {IconSelectorModule} from '@common/shared/icon-selector/icon-selector.module';\r\nimport {TranslationsModule} from '@common/core/translations/translations.module';\r\nimport {ImageOrIconModule} from '@common/core/ui/image-or-icon/image-or-icon.module';\r\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {APPEARANCE_EDITOR_CONFIG, DEFAULT_APPEARANCE_EDITOR_CONFIG} from './appearance-editor-config.token';\r\n\r\n@NgModule({\r\n    imports: [\r\n        AppearanceRoutingModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        IconSelectorModule,\r\n        TranslationsModule,\r\n        ImageOrIconModule,\r\n        LoadingIndicatorModule,\r\n        ColorPickerInputModule,\r\n\r\n        // material\r\n        MatMenuModule,\r\n        MatProgressBarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        MatExpansionModule,\r\n        DragDropModule,\r\n        MatSidenavModule,\r\n        PortalModule,\r\n        MatSlideToggleModule,\r\n    ],\r\n    exports: [\r\n        AppearancePanelMetaComponent,\r\n        HighlightInPreviewDirective,\r\n        AppearanceImageInputComponent,\r\n    ],\r\n    declarations: [\r\n        AppearanceComponent,\r\n        AddMenuItemPanelComponent,\r\n        AppearancePanelMetaComponent,\r\n        MenuItemsComponent,\r\n        CodeEditorModalComponent,\r\n        CrupdateCssThemeModalComponent,\r\n        CssThemeColorsPanelComponent,\r\n        AppearanceImageInputComponent,\r\n        MenusAppearancePanelComponent,\r\n        ThemesAppearancePanelComponent,\r\n        GeneralAppearancePanelComponent,\r\n        SeoAppearancePanelComponent,\r\n        CustomCodeAppearancePanelComponent,\r\n        HighlightInPreviewDirective,\r\n    ],\r\n    providers: [\r\n        {\r\n            provide: APPEARANCE_EDITOR_CONFIG,\r\n            useValue: DEFAULT_APPEARANCE_EDITOR_CONFIG,\r\n            multi: true,\r\n        }\r\n    ]\r\n})\r\nexport class BaseAppearanceModule {\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ColorPickerInputComponent} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatIconModule} from '@angular/material/icon';\n\n\n@NgModule({\n    declarations: [\n        ColorPickerInputComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        MatIconModule,\n    ],\n    exports: [\n        ColorPickerInputComponent,\n    ]\n})\nexport class ColorPickerInputModule {\n}\n","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, NgZone, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlider),\n    multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\nclass MatSliderChange {\n}\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nlet MatSlider = /** @class */ (() => {\n    class MatSlider extends _MatSliderMixinBase {\n        constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n            super(elementRef);\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._ngZone = _ngZone;\n            this._animationMode = _animationMode;\n            this._invert = false;\n            this._max = 100;\n            this._min = 0;\n            this._step = 1;\n            this._thumbLabel = false;\n            this._tickInterval = 0;\n            this._value = null;\n            this._vertical = false;\n            /** Event emitted when the slider value has changed. */\n            this.change = new EventEmitter();\n            /** Event emitted when the slider thumb moves. */\n            this.input = new EventEmitter();\n            /**\n             * Emits when the raw value of the slider changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            this.valueChange = new EventEmitter();\n            /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n            this.onTouched = () => { };\n            this._percent = 0;\n            /**\n             * Whether or not the thumb is sliding.\n             * Used to determine if there should be a transition for the thumb and fill track.\n             */\n            this._isSliding = false;\n            /**\n             * Whether or not the slider is active (clicked or sliding).\n             * Used to shrink and grow the thumb as according to the Material Design spec.\n             */\n            this._isActive = false;\n            /** The size of a tick interval as a percentage of the size of the track. */\n            this._tickIntervalPercent = 0;\n            /** The dimensions of the slider. */\n            this._sliderDimensions = null;\n            this._controlValueAccessorChangeFn = () => { };\n            /** Subscription to the Directionality change EventEmitter. */\n            this._dirChangeSubscription = Subscription.EMPTY;\n            /** Called when the user has put their pointer down on the slider. */\n            this._pointerDown = (event) => {\n                // Don't do anything if the slider is disabled or the\n                // user is using anything other than the main mouse button.\n                if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                    return;\n                }\n                this._ngZone.run(() => {\n                    const oldValue = this.value;\n                    const pointerPosition = getPointerPositionOnPage(event);\n                    this._isSliding = true;\n                    this._lastPointerEvent = event;\n                    event.preventDefault();\n                    this._focusHostElement();\n                    this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                    this._bindGlobalEvents(event);\n                    this._focusHostElement();\n                    this._updateValueFromPosition(pointerPosition);\n                    this._valueOnSlideStart = this.value;\n                    this._pointerPositionOnStart = pointerPosition;\n                    // Emit a change and input event if the value changed.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                        this._emitChangeEvent();\n                    }\n                });\n            };\n            /**\n             * Called when the user has moved their pointer after\n             * starting to drag. Bound on the document level.\n             */\n            this._pointerMove = (event) => {\n                if (this._isSliding) {\n                    // Prevent the slide from selecting anything else.\n                    event.preventDefault();\n                    const oldValue = this.value;\n                    this._lastPointerEvent = event;\n                    this._updateValueFromPosition(getPointerPositionOnPage(event));\n                    // Native range elements always emit `input` events when the value changed while sliding.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                    }\n                }\n            };\n            /** Called when the user has lifted their pointer. Bound on the document level. */\n            this._pointerUp = (event) => {\n                if (this._isSliding) {\n                    const pointerPositionOnStart = this._pointerPositionOnStart;\n                    const currentPointerPosition = getPointerPositionOnPage(event);\n                    event.preventDefault();\n                    this._removeGlobalEvents();\n                    this._valueOnSlideStart = this._pointerPositionOnStart = this._lastPointerEvent = null;\n                    this._isSliding = false;\n                    if (this._valueOnSlideStart != this.value && !this.disabled &&\n                        pointerPositionOnStart && (pointerPositionOnStart.x !== currentPointerPosition.x ||\n                        pointerPositionOnStart.y !== currentPointerPosition.y)) {\n                        this._emitChangeEvent();\n                    }\n                }\n            };\n            /** Called when the window has lost focus. */\n            this._windowBlur = () => {\n                // If the window is blurred while dragging we need to stop dragging because the\n                // browser won't dispatch the `mouseup` and `touchend` events anymore.\n                if (this._lastPointerEvent) {\n                    this._pointerUp(this._lastPointerEvent);\n                }\n            };\n            this._document = _document;\n            this.tabIndex = parseInt(tabIndex) || 0;\n            _ngZone.runOutsideAngular(() => {\n                const element = elementRef.nativeElement;\n                element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n                element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n            });\n        }\n        /** Whether the slider is inverted. */\n        get invert() { return this._invert; }\n        set invert(value) {\n            this._invert = coerceBooleanProperty(value);\n        }\n        /** The maximum value that the slider can have. */\n        get max() { return this._max; }\n        set max(v) {\n            this._max = coerceNumberProperty(v, this._max);\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n        /** The minimum value that the slider can have. */\n        get min() { return this._min; }\n        set min(v) {\n            this._min = coerceNumberProperty(v, this._min);\n            // If the value wasn't explicitly set by the user, set it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n        /** The values at which the thumb will snap. */\n        get step() { return this._step; }\n        set step(v) {\n            this._step = coerceNumberProperty(v, this._step);\n            if (this._step % 1 !== 0) {\n                this._roundToDecimal = this._step.toString().split('.').pop().length;\n            }\n            // Since this could modify the label, we need to notify the change detection.\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Whether or not to show the thumb label. */\n        get thumbLabel() { return this._thumbLabel; }\n        set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n        /**\n         * How often to show ticks. Relative to the step so that a tick always appears on a step.\n         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n         */\n        get tickInterval() { return this._tickInterval; }\n        set tickInterval(value) {\n            if (value === 'auto') {\n                this._tickInterval = 'auto';\n            }\n            else if (typeof value === 'number' || typeof value === 'string') {\n                this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n            }\n            else {\n                this._tickInterval = 0;\n            }\n        }\n        /** Value of the slider. */\n        get value() {\n            // If the value needs to be read and it is still uninitialized, initialize it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            return this._value;\n        }\n        set value(v) {\n            if (v !== this._value) {\n                let value = coerceNumberProperty(v);\n                // While incrementing by a decimal we can end up with values like 33.300000000000004.\n                // Truncate it to ensure that it matches the label and to make it easier to work with.\n                if (this._roundToDecimal) {\n                    value = parseFloat(value.toFixed(this._roundToDecimal));\n                }\n                this._value = value;\n                this._percent = this._calculatePercentage(this._value);\n                // Since this also modifies the percentage, we need to let the change detection know.\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /** Whether the slider is vertical. */\n        get vertical() { return this._vertical; }\n        set vertical(value) {\n            this._vertical = coerceBooleanProperty(value);\n        }\n        /** The value to be used for display purposes. */\n        get displayValue() {\n            if (this.displayWith) {\n                // Value is never null but since setters and getters cannot have\n                // different types, the value getter is also typed to return null.\n                return this.displayWith(this.value);\n            }\n            // Note that this could be improved further by rounding something like 0.999 to 1 or\n            // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n            // every change detection cycle.\n            if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n                return this.value.toFixed(this._roundToDecimal);\n            }\n            return this.value || 0;\n        }\n        /** set focus to the host element */\n        focus(options) {\n            this._focusHostElement(options);\n        }\n        /** blur the host element */\n        blur() {\n            this._blurHostElement();\n        }\n        /** The percentage of the slider that coincides with the value. */\n        get percent() { return this._clamp(this._percent); }\n        /**\n         * Whether the axis of the slider is inverted.\n         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n         */\n        get _invertAxis() {\n            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n            // top. However from a y-axis standpoint this is inverted.\n            return this.vertical ? !this.invert : this.invert;\n        }\n        /** Whether the slider is at its minimum value. */\n        get _isMinValue() {\n            return this.percent === 0;\n        }\n        /**\n         * The amount of space to leave between the slider thumb and the track fill & track background\n         * elements.\n         */\n        get _thumbGap() {\n            if (this.disabled) {\n                return DISABLED_THUMB_GAP;\n            }\n            if (this._isMinValue && !this.thumbLabel) {\n                return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n            }\n            return 0;\n        }\n        /** CSS styles for the track background element. */\n        get _trackBackgroundStyles() {\n            const axis = this.vertical ? 'Y' : 'X';\n            const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n            const sign = this._shouldInvertMouseCoords() ? '-' : '';\n            return {\n                // scale3d avoids some rendering issues in Chrome. See #12071.\n                transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n            };\n        }\n        /** CSS styles for the track fill element. */\n        get _trackFillStyles() {\n            const percent = this.percent;\n            const axis = this.vertical ? 'Y' : 'X';\n            const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n            const sign = this._shouldInvertMouseCoords() ? '' : '-';\n            return {\n                // scale3d avoids some rendering issues in Chrome. See #12071.\n                transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n                // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n                // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n                // the value of the slider is 0, we can easily get into this situation. We force a\n                // recalculation by changing the element's `display` when it goes from 0 to any other value.\n                display: percent === 0 ? 'none' : ''\n            };\n        }\n        /** CSS styles for the ticks container element. */\n        get _ticksContainerStyles() {\n            let axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the ticks container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n            let offset = this._tickIntervalPercent / 2 * 100;\n            return {\n                'transform': `translate${axis}(${sign}${offset}%)`\n            };\n        }\n        /** CSS styles for the ticks element. */\n        get _ticksStyles() {\n            let tickSize = this._tickIntervalPercent * 100;\n            let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n            let axis = this.vertical ? 'Y' : 'X';\n            // Depending on the direction we pushed the ticks container, push the ticks the opposite\n            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n            // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n            let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n            let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n            let styles = {\n                'backgroundSize': backgroundSize,\n                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n                'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n            };\n            if (this._isMinValue && this._thumbGap) {\n                let side;\n                if (this.vertical) {\n                    side = this._invertAxis ? 'Bottom' : 'Top';\n                }\n                else {\n                    side = this._invertAxis ? 'Right' : 'Left';\n                }\n                styles[`padding${side}`] = `${this._thumbGap}px`;\n            }\n            return styles;\n        }\n        get _thumbContainerStyles() {\n            let axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the thumb container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n            let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n            return {\n                'transform': `translate${axis}(-${offset}%)`\n            };\n        }\n        /**\n         * Whether mouse events should be converted to a slider position by calculating their distance\n         * from the right or bottom edge of the slider as opposed to the top or left.\n         */\n        _shouldInvertMouseCoords() {\n            return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        }\n        /** The language direction for this slider element. */\n        _getDirection() {\n            return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n        }\n        ngAfterViewInit() {\n            this._focusMonitor\n                .monitor(this._elementRef, true)\n                .subscribe((origin) => {\n                this._isActive = !!origin && origin !== 'keyboard';\n                this._changeDetectorRef.detectChanges();\n            });\n            if (this._dir) {\n                this._dirChangeSubscription = this._dir.change.subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        }\n        ngOnDestroy() {\n            const element = this._elementRef.nativeElement;\n            element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n            this._lastPointerEvent = null;\n            this._removeGlobalEvents();\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            this._dirChangeSubscription.unsubscribe();\n        }\n        _onMouseenter() {\n            if (this.disabled) {\n                return;\n            }\n            // We save the dimensions of the slider here so we can use them to update the spacing of the\n            // ticks and determine where on the slider click and slide events happen.\n            this._sliderDimensions = this._getSliderDimensions();\n            this._updateTickIntervalPercent();\n        }\n        _onFocus() {\n            // We save the dimensions of the slider here so we can use them to update the spacing of the\n            // ticks and determine where on the slider click and slide events happen.\n            this._sliderDimensions = this._getSliderDimensions();\n            this._updateTickIntervalPercent();\n        }\n        _onBlur() {\n            this.onTouched();\n        }\n        _onKeydown(event) {\n            if (this.disabled || hasModifierKey(event)) {\n                return;\n            }\n            const oldValue = this.value;\n            switch (event.keyCode) {\n                case PAGE_UP:\n                    this._increment(10);\n                    break;\n                case PAGE_DOWN:\n                    this._increment(-10);\n                    break;\n                case END:\n                    this.value = this.max;\n                    break;\n                case HOME:\n                    this.value = this.min;\n                    break;\n                case LEFT_ARROW:\n                    // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                    // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                    // about the slider indicates that it is inverted. They will expect left to be decrement,\n                    // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                    // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                    // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                    // sighted users, therefore we do not swap the meaning.\n                    this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                    break;\n                case UP_ARROW:\n                    this._increment(1);\n                    break;\n                case RIGHT_ARROW:\n                    // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                    this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                    break;\n                case DOWN_ARROW:\n                    this._increment(-1);\n                    break;\n                default:\n                    // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                    // it.\n                    return;\n            }\n            if (oldValue != this.value) {\n                this._emitInputEvent();\n                this._emitChangeEvent();\n            }\n            this._isSliding = true;\n            event.preventDefault();\n        }\n        _onKeyup() {\n            this._isSliding = false;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            return this._document.defaultView || window;\n        }\n        /**\n         * Binds our global move and end events. They're bound at the document level and only while\n         * dragging so that the user doesn't have to keep their pointer exactly over the slider\n         * as they're swiping across the screen.\n         */\n        _bindGlobalEvents(triggerEvent) {\n            // Note that we bind the events to the `document`, because it allows us to capture\n            // drag cancel events where the user's pointer is outside the browser window.\n            const document = this._document;\n            const isTouch = isTouchEvent(triggerEvent);\n            const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n            const endEventName = isTouch ? 'touchend' : 'mouseup';\n            document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n            document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n            if (isTouch) {\n                document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n            }\n            const window = this._getWindow();\n            if (typeof window !== 'undefined' && window) {\n                window.addEventListener('blur', this._windowBlur);\n            }\n        }\n        /** Removes any global event listeners that we may have added. */\n        _removeGlobalEvents() {\n            const document = this._document;\n            document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n            document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n            document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n            document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n            document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n            const window = this._getWindow();\n            if (typeof window !== 'undefined' && window) {\n                window.removeEventListener('blur', this._windowBlur);\n            }\n        }\n        /** Increments the slider by the given number of steps (negative number decrements). */\n        _increment(numSteps) {\n            this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n        }\n        /** Calculate the new value from the new physical location. The value will always be snapped. */\n        _updateValueFromPosition(pos) {\n            if (!this._sliderDimensions) {\n                return;\n            }\n            let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n            let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            let posComponent = this.vertical ? pos.y : pos.x;\n            // The exact value is calculated from the event and used to find the closest snap value.\n            let percent = this._clamp((posComponent - offset) / size);\n            if (this._shouldInvertMouseCoords()) {\n                percent = 1 - percent;\n            }\n            // Since the steps may not divide cleanly into the max value, if the user\n            // slid to 0 or 100 percent, we jump to the min/max value. This approach\n            // is slightly more intuitive than using `Math.ceil` below, because it\n            // follows the user's pointer closer.\n            if (percent === 0) {\n                this.value = this.min;\n            }\n            else if (percent === 1) {\n                this.value = this.max;\n            }\n            else {\n                const exactValue = this._calculateValue(percent);\n                // This calculation finds the closest step by finding the closest\n                // whole number divisible by the step relative to the min.\n                const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n                // The value needs to snap to the min and max.\n                this.value = this._clamp(closestValue, this.min, this.max);\n            }\n        }\n        /** Emits a change event if the current value is different from the last emitted value. */\n        _emitChangeEvent() {\n            this._controlValueAccessorChangeFn(this.value);\n            this.valueChange.emit(this.value);\n            this.change.emit(this._createChangeEvent());\n        }\n        /** Emits an input event when the current value is different from the last emitted value. */\n        _emitInputEvent() {\n            this.input.emit(this._createChangeEvent());\n        }\n        /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n        _updateTickIntervalPercent() {\n            if (!this.tickInterval || !this._sliderDimensions) {\n                return;\n            }\n            if (this.tickInterval == 'auto') {\n                let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n                let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n                let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n                let pixelsPerTick = stepsPerTick * this.step;\n                this._tickIntervalPercent = pixelsPerTick / trackSize;\n            }\n            else {\n                this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n            }\n        }\n        /** Creates a slider change object from the specified value. */\n        _createChangeEvent(value = this.value) {\n            let event = new MatSliderChange();\n            event.source = this;\n            event.value = value;\n            return event;\n        }\n        /** Calculates the percentage of the slider that a value is. */\n        _calculatePercentage(value) {\n            return ((value || 0) - this.min) / (this.max - this.min);\n        }\n        /** Calculates the value a percentage of the slider corresponds to. */\n        _calculateValue(percentage) {\n            return this.min + percentage * (this.max - this.min);\n        }\n        /** Return a number between two numbers. */\n        _clamp(value, min = 0, max = 1) {\n            return Math.max(min, Math.min(value, max));\n        }\n        /**\n         * Get the bounding client rect of the slider track element.\n         * The track is used rather than the native element to ignore the extra space that the thumb can\n         * take up.\n         */\n        _getSliderDimensions() {\n            return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n        }\n        /**\n         * Focuses the native element.\n         * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n         */\n        _focusHostElement(options) {\n            this._elementRef.nativeElement.focus(options);\n        }\n        /** Blurs the native element. */\n        _blurHostElement() {\n            this._elementRef.nativeElement.blur();\n        }\n        /**\n         * Sets the model value. Implemented as part of ControlValueAccessor.\n         * @param value\n         */\n        writeValue(value) {\n            this.value = value;\n        }\n        /**\n         * Registers a callback to be triggered when the value has changed.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        registerOnChange(fn) {\n            this._controlValueAccessorChangeFn = fn;\n        }\n        /**\n         * Registers a callback to be triggered when the component is touched.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        registerOnTouched(fn) {\n            this.onTouched = fn;\n        }\n        /**\n         * Sets whether the component should be disabled.\n         * Implemented as part of ControlValueAccessor.\n         * @param isDisabled\n         */\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n        }\n    }\nMatSlider.ɵfac = function MatSlider_Factory(t) { return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlider, selectors: [[\"mat-slider\"]], viewQuery: function MatSlider_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    } }, hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"], hostVars: 28, hostBindings: function MatSlider_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSlider_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"keyup\", function MatSlider_keyup_HostBindingHandler() { return ctx._onKeyup(); })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() { return ctx._onMouseenter(); })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) { return $event.preventDefault(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._invertAxis)(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue)(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue && ctx._thumbGap && ctx._invertAxis)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", value: \"value\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", vertical: \"vertical\", displayWith: \"displayWith\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, exportAs: [\"matSlider\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]], template: function MatSlider_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackBackgroundStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackFillStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksContainerStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._thumbContainerStyles);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    } }, directives: [ɵngcc3.NgStyle], styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatSlider.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatSlider.propDecorators = {\n        invert: [{ type: Input }],\n        max: [{ type: Input }],\n        min: [{ type: Input }],\n        step: [{ type: Input }],\n        thumbLabel: [{ type: Input }],\n        tickInterval: [{ type: Input }],\n        value: [{ type: Input }],\n        displayWith: [{ type: Input }],\n        vertical: [{ type: Input }],\n        change: [{ type: Output }],\n        input: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider mat-focus-indicator',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { change: [{\n            type: Output\n        }], input: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], invert: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], step: [{\n            type: Input\n        }], thumbLabel: [{\n            type: Input\n        }], tickInterval: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], displayWith: [{\n            type: Input\n        }], _sliderWrapper: [{\n            type: ViewChild,\n            args: ['sliderWrapper']\n        }] }); })();\n    return MatSlider;\n})();\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event) {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n    return { x: point.clientX, y: point.clientY };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatSliderModule = /** @class */ (() => {\n    class MatSliderModule {\n    }\nMatSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSliderModule });\nMatSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSliderModule_Factory(t) { return new (t || MatSliderModule)(); }, imports: [[CommonModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, { declarations: function () { return [MatSlider]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSlider, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider]\n            }]\n    }], null, null); })();\n    return MatSliderModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n\n//# sourceMappingURL=slider.js.map","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\r\n\r\n<div class=\"appearance-panel-content\">\r\n    <ng-container *ngIf=\"selectedSubpanel$ | async as selectedSubpanel; else mainPanel\">\r\n        <div [ngSwitch]=\"selectedSubpanel\">\r\n            <ng-container *ngSwitchCase=\"'primaryFeatures'\">\r\n                <div *ngFor=\"let group of primaryArray().controls; index as index\" [formGroup]=\"group\"\r\n                     class=\"many-inputs feature-group\">\r\n                    <div class=\"feature-group-header\">\r\n                        <div class=\"text\">{{'Feature' | trans}} #{{index + 1}}</div>\r\n                        <button mat-icon-button color=\"warn\" (click)=\"removeFeature('primary', index)\">\r\n                            <mat-icon svgIcon=\"close\"></mat-icon>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label [for]=\"'primary.' + index + '.title'\" trans>Title</label>\r\n                        <input type=\"text\" [id]=\"'primary.' + index + '.title'\" formControlName=\"title\"\r\n                               [placeholder]=\"defaultValue('primaryFeatures.' + index + '.title')\"\r\n                               highlightInPreview=\".inline-feature:nth-child({{index + 1}}) h3\" required>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label [for]=\"'primary.' + index + '.subtitle'\" trans>Subtitle</label>\r\n                        <input type=\"text\" [id]=\"'primary.' + index + '.subtitle'\" formControlName=\"subtitle\"\r\n                               [placeholder]=\"defaultValue('primaryFeatures.' + index + '.subtitle')\"\r\n                               highlightInPreview=\".inline-feature:nth-child({{index + 1}}) p\" required>\r\n                    </div>\r\n                    <appearance-image-input [defaultValue]=\"defaultValue('primaryFeatures.' + index + '.image')\"\r\n                                            formControlName=\"image\"\r\n                                            diskPrefix=\"homepage\"\r\n                                            highlightInPreview=\".inline-feature:nth-child({{index + 1}}) img\" trans>\r\n                        Image\r\n                    </appearance-image-input>\r\n                </div>\r\n                <button mat-flat-button color=\"accent\" *ngIf=\"primaryArray().length < 3\" (click)=\"addFeature('primary')\" trans>Add</button>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"'secondaryFeatures'\">\r\n                <div *ngFor=\"let group of secondaryArray().controls; index as index\" [formGroup]=\"group\"\r\n                     class=\"many-inputs feature-group\">\r\n                    <div class=\"feature-group-header\">\r\n                        <div class=\"text\">{{'Feature' | trans}} #{{index + 1}}</div>\r\n                        <button mat-icon-button color=\"warn\" (click)=\"removeFeature('secondary', index)\">\r\n                            <mat-icon svgIcon=\"close\"></mat-icon>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label [for]=\"'secondary.' + index + '.title'\" trans>Title</label>\r\n                        <input type=\"text\" [id]=\"'secondary.' + index + '.title'\" formControlName=\"title\"\r\n                               [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.title')\"\r\n                               highlightInPreview=\".big-feature:nth-child({{index + 1}}) h2\" required>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label [for]=\"'secondary.' + index + '.subtitle'\" trans>Subtitle</label>\r\n                        <input type=\"text\" [id]=\"'secondary.' + index + '.subtitle'\" formControlName=\"subtitle\"\r\n                               [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.subtitle')\"\r\n                               highlightInPreview=\".big-feature:nth-child({{index + 1}}) small\" required>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label [for]=\"'secondary.' + index + '.description'\" trans>Description</label>\r\n                        <textarea type=\"text\" [id]=\"'secondary.' + index + '.description'\" formControlName=\"description\"\r\n                                  rows=\"4\" [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.description')\"\r\n                                  highlightInPreview=\".big-feature:nth-child({{index + 1}}) p\"\r\n                                  required></textarea>\r\n                    </div>\r\n                    <appearance-image-input [defaultValue]=\"defaultValue('secondaryFeatures.' + index + '.image')\"\r\n                                            highlightInPreview=\".big-feature:nth-child({{index + 1}}) img\"\r\n                                            diskPrefix=\"homepage\"\r\n                                            formControlName=\"image\" trans>Image\r\n                    </appearance-image-input>\r\n                </div>\r\n                <button mat-flat-button color=\"accent\" (click)=\"addFeature('secondary')\" trans>Add</button>\r\n            </ng-container>\r\n            <div *ngSwitchCase=\"'actions'\" class=\"many-inputs\" [formGroup]=\"form.get('actions')\">\r\n                <div class=\"input-container\">\r\n                    <label for=\"home.actions.inputText\" trans>Input Text</label>\r\n                    <input type=\"text\" id=\"home.actions.inputText\" formControlName=\"inputText\"\r\n                           highlightInPreview=\"new-link-form input\"\r\n                           [placeholder]=\"defaultValue('actions.inputText')\" required>\r\n                </div>\r\n                <div class=\"input-container\">\r\n                    <label for=\"home.actions.inputButton\" trans>Input Button</label>\r\n                    <input type=\"text\" id=\"home.actions.inputButton\" formControlName=\"inputButton\"\r\n                           highlightInPreview=\"new-link-form .mat-flat-button\"\r\n                           [placeholder]=\"defaultValue('actions.inputButton')\" required>\r\n                </div>\r\n                <div class=\"input-container\">\r\n                    <label for=\"home.actions.cta1\" trans>Call to Action #1</label>\r\n                    <input type=\"text\" id=\"home.actions.cta1\" formControlName=\"cta1\"\r\n                           highlightInPreview=\".get-started-button\"\r\n                           [placeholder]=\"defaultValue('actions.cta1')\" required>\r\n                </div>\r\n                <div class=\"input-container\">\r\n                    <label for=\"home.actions.cta2\" trans>Call to Action #2</label>\r\n                    <input type=\"text\" id=\"home.actions.cta2\" formControlName=\"cta2\"\r\n                           highlightInPreview=\".learn-more-button\"\r\n                           [placeholder]=\"defaultValue('actions.cta2')\" required>\r\n                </div>\r\n            </div>\r\n            <div *ngSwitchCase=\"'channels'\" class=\"channels-panel many-inputs\">\r\n                <div class=\"slider-list-container\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"slider-list\" trans>Manage Channels</label>\r\n                        <div class=\"input-wrapper\">\r\n                            <input id=\"slider-list\" [formControl]=\"searchControl\" [matAutocomplete]=\"sliderAuto\" placeholder=\"Find channel...\" trans-placeholder #inputEl>\r\n                            <button type=\"submit\" mat-icon-button class=\"search-button\">\r\n                                <mat-icon svgIcon=\"search\"></mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <mat-autocomplete #sliderAuto=\"matAutocomplete\" class=\"search-list-autocomplete\" (optionSelected)=\"selectResult($event)\" [autoActiveFirstOption]=\"true\" [displayWith]=\"displayFn\">\r\n                        <mat-option *ngFor=\"let result of results$ | async\" [value]=\"result\">{{result.name}}</mat-option>\r\n                    </mat-autocomplete>\r\n                </div>\r\n\r\n                <a mat-raised-button color=\"accent\" routerLink=\"/admin/channels/new\" target=\"_blank\" trans>New Channel</a>\r\n\r\n                <loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\r\n\r\n                <div class=\"lists\" cdkDropList (cdkDropListDropped)=\"reorderChannels($event)\">\r\n                    <div class=\"channel-list-item\" *ngFor=\"let channel of selectedChannels$ | async\" cdkDrag>\r\n                        <button mat-icon-button cdkDragHandle>\r\n                            <mat-icon svgIcon=\"drag-handle\"></mat-icon>\r\n                        </button>\r\n                        <div class=\"name\">{{channel.name}}</div>\r\n                        <div class=\"actions\">\r\n                            <a mat-icon-button [routerLink]=\"['/admin/channels', channel.id, 'edit']\" target=\"_blank\">\r\n                                <mat-icon svgIcon=\"edit\"></mat-icon>\r\n                            </a>\r\n                            <button mat-icon-button (click)=\"removeChannel(channel)\">\r\n                                <mat-icon svgIcon=\"delete\"></mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-template #mainPanel>\r\n        <div [formGroup]=\"form\" class=\"many-inputs\">\r\n            <div class=\"input-container\">\r\n                <label for=\"home.header.title\" trans>Header Title</label>\r\n                <input type=\"text\" id=\"home.header.title\" formControlName=\"headerTitle\"\r\n                       [placeholder]=\"defaultValue('headerTitle')\" highlightInPreview=\".header-title\" required>\r\n            </div>\r\n            <div class=\"input-container\">\r\n                <label for=\"home.header.subtitle\" trans>Header Subtitle</label>\r\n                <textarea type=\"text\" id=\"home.header.subtitle\" formControlName=\"headerSubtitle\" rows=\"4\"\r\n                          [placeholder]=\"defaultValue('headerSubtitle')\" highlightInPreview=\".header-description\"\r\n                          required></textarea>\r\n            </div>\r\n\r\n            <appearance-image-input [defaultValue]=\"defaultValue('headerImage')\"\r\n                                    highlightInPreview=\".hero\"\r\n                                    diskPrefix=\"homepage\"\r\n                                    formControlName=\"headerImage\" trans>Header Image\r\n            </appearance-image-input>\r\n\r\n            <color-picker-input formControlName=\"headerOverlayColor1\" trans>Header Overlay Color 1</color-picker-input>\r\n            <color-picker-input formControlName=\"headerOverlayColor2\" trans>Header Overlay Color 2</color-picker-input>\r\n\r\n            <div class=\"separator\"></div>\r\n\r\n            <ul>\r\n                <li (click)=\"openSubpanel('actions')\" class=\"nav-item\">\r\n                    <span class=\"text\" trans>Action Buttons</span>\r\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n                </li>\r\n                <li (click)=\"openSubpanel('primaryFeatures')\" class=\"nav-item\">\r\n                    <span class=\"text\" trans>Primary Features</span>\r\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n                </li>\r\n                <li (click)=\"openSubpanel('secondaryFeatures')\" class=\"nav-item\">\r\n                    <span class=\"text\" trans>Secondary Features</span>\r\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n                </li>\r\n                <li (click)=\"openSubpanel('channels')\" class=\"nav-item\">\r\n                    <span class=\"text\" trans>Channels</span>\r\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n                </li>\r\n            </ul>\r\n\r\n            <div class=\"separator\"></div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"home.footer.title\" trans>Footer Title</label>\r\n                <input type=\"text\" id=\"home.footer.title\" formControlName=\"footerTitle\"\r\n                       [placeholder]=\"defaultValue('footerTitle')\" highlightInPreview=\".footer-title\" required>\r\n            </div>\r\n            <div class=\"input-container\">\r\n                <label for=\"home.footer.subtitle\" trans>Footer Subtitle</label>\r\n                <textarea type=\"text\" id=\"home.footer.subtitle\" formControlName=\"footerSubtitle\" rows=\"4\"\r\n                          [placeholder]=\"defaultValue('footerSubtitle')\" highlightInPreview=\".footer-description\"\r\n                          required></textarea>\r\n            </div>\r\n            <appearance-image-input [defaultValue]=\"defaultValue('footerImage')\"\r\n                                    highlightInPreview=\".bottom-cta\"\r\n                                    diskPrefix=\"homepage\"\r\n                                    formControlName=\"footerImage\" trans>Footer Image\r\n            </appearance-image-input>\r\n        </div>\r\n    </ng-template>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {BehaviorSubject, of} from 'rxjs';\nimport {FormArray, FormBuilder, FormControl} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {catchError, debounceTime, distinctUntilChanged, filter, finalize, map, switchMap} from 'rxjs/operators';\nimport * as Dot from 'dot-object';\nimport {HomepageContent} from '../../../web-player/landing/homepage-content';\nimport {Channel} from '../../channels/channel';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport {ChannelService} from '../../channels/channel.service';\nimport {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {mapOrder} from '@common/core/utils/map-order';\n\nconst CONFIG_KEY = 'homepage.appearance';\n\n@Component({\n    selector: 'homepage-appearance-panel',\n    templateUrl: './homepage-appearance-panel.component.html',\n    styleUrls: ['./homepage-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HomepageAppearancePanelComponent implements OnInit {\n    public selectedSubpanel$ = new BehaviorSubject<string>(null);\n    public defaultValues: HomepageContent;\n\n    public path$ = this.selectedSubpanel$.pipe(map(panel => {\n        const path = ['Homepage'];\n        if (panel) path.push(panel);\n        return path;\n    }));\n\n    public form = this.fb.group({\n        headerTitle: [''],\n        headerSubtitle: [''],\n        headerImage: [''],\n        headerOverlayColor1: [''],\n        headerOverlayColor2: [''],\n        footerTitle: [''],\n        footerSubtitle: [''],\n        footerImage: [''],\n        actions: this.fb.group({\n            inputText: [''],\n            inputButton: [''],\n            cta1: [''],\n            cta2: [''],\n        }),\n        primaryFeatures: this.fb.array([]),\n        secondaryFeatures: this.fb.array([]),\n        channelIds: this.fb.control([]),\n    });\n\n    public searchControl = new FormControl();\n    public results$ = new BehaviorSubject<Channel[]>([]);\n    public loading$ = new BehaviorSubject(false);\n    public selectedChannels$ = new BehaviorSubject<Channel[]>([]);\n\n    constructor(\n        private fb: FormBuilder,\n        private editor: AppearanceEditor,\n        private settings: Settings,\n        private channels: ChannelService,\n    ) {}\n\n    ngOnInit() {\n        this.bindToSearchQueryControl();\n        const data = this.settings.getJson(CONFIG_KEY, {}) as HomepageContent;\n        this.loadChannels(data.channelIds);\n        this.defaultValues = this.editor.defaultSettings[CONFIG_KEY] ? JSON.parse(this.editor.defaultSettings[CONFIG_KEY]) : {};\n\n        (data.primaryFeatures || []).forEach(() => {\n            this.addFeature('primary');\n        });\n        (data.secondaryFeatures || []).forEach(() => {\n            this.addFeature('secondary');\n        });\n\n        this.form.patchValue(data);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.setConfig(CONFIG_KEY, value);\n            this.editor.addChanges({[CONFIG_KEY]: value});\n        });\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedSubpanel$.value) {\n            this.openSubpanel(null);\n        } else {\n            this.editor.closeActivePanel();\n        }\n    }\n\n    public openSubpanel(name: string) {\n        this.selectedSubpanel$.next(name);\n    }\n\n    public addFeature(type: 'primary'|'secondary') {\n        const features = this.form.get(`${type}Features`) as FormArray;\n        const data: {[key: string]: string[]} = {title: [''], subtitle: [''], image: ['']};\n        if (type === 'secondary') {\n            data.description = [''];\n        }\n        features.push(this.fb.group(data));\n    }\n\n    public removeFeature(type: 'primary'|'secondary', index: number) {\n        const features = this.form.get(`${type}Features`) as FormArray;\n        features.removeAt(index);\n    }\n\n    public defaultValue(key: string): string {\n        return Dot.pick(key, this.defaultValues) || '';\n    }\n\n    public primaryArray() {\n        return this.form.get('primaryFeatures') as FormArray;\n    }\n\n    public secondaryArray() {\n        return this.form.get('secondaryFeatures') as FormArray;\n    }\n\n    /**\n     * CHANNELS\n     */\n\n    private loadChannels(channelIds: number[]) {\n        if ( ! channelIds || !channelIds.length) return;\n        this.loading$.next(true);\n        this.channels.all({channelIds})\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                const channels = response.pagination.data;\n                this.selectedChannels$.next(mapOrder(channels, channelIds, 'id'));\n            });\n    }\n\n    public removeChannel(channel: Channel) {\n        const channels = this.selectedChannels$.value;\n        const newChannels = channels.filter(curr => curr.id !== channel.id);\n        this.updateChannels(newChannels);\n    }\n\n    public reorderChannels($event) {\n        const channels = this.selectedChannels$.value.slice();\n        moveItemInArray(channels, $event.previousIndex, $event.currentIndex);\n        this.updateChannels(channels);\n    }\n\n    public selectResult(e: MatAutocompleteSelectedEvent) {\n        const newChannel = e.option.value;\n        if (this.selectedChannels$.value.find(c => c.id === newChannel.id)) {\n            return;\n        }\n        this.updateChannels([...this.selectedChannels$.value, newChannel]);\n        this.searchControl.reset();\n    }\n\n    private updateChannels(newChannels: Channel[]) {\n        this.selectedChannels$.next(newChannels);\n        this.form.patchValue({channelIds: newChannels.map(c => c.id)});\n    }\n\n    private bindToSearchQueryControl() {\n        this.searchControl.valueChanges\n            .pipe(\n                debounceTime(200),\n                distinctUntilChanged(),\n                filter(query => typeof query === 'string'),\n                switchMap(query => this.searchForChannel(query)),\n                catchError(() => of([])),\n            ).subscribe(results => {\n            this.results$.next(results);\n        });\n    }\n\n    private searchForChannel(query: string) {\n        return this.channels.all({query})\n            .pipe(map(response => {\n                return response.pagination.data\n                    // track list is not supported on landing page currently.\n                    .filter(c => c.content_type !== 'trackTable' && c.content_type !== 'trackList');\n            }));\n    }\n\n    public displayFn = (channel: Channel) => channel ? channel.name : '';\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BaseAppearanceModule} from '@common/admin/appearance/base-appearance.module';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {HomepageAppearancePanelComponent} from './homepage-appearance-panel/homepage-appearance-panel.component';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {RouterModule} from '@angular/router';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {APPEARANCE_EDITOR_CONFIG} from '../../../common/admin/appearance/appearance-editor-config.token';\nimport {APP_APPEARANCE_CONFIG} from './app-appearance-config';\n\n\n@NgModule({\n    declarations: [\n        HomepageAppearancePanelComponent,\n    ],\n    imports: [\n        CommonModule,\n        BaseAppearanceModule,\n        ReactiveFormsModule,\n        ColorPickerInputModule,\n        LoadingIndicatorModule,\n        RouterModule,\n\n        // material\n        MatIconModule,\n        MatButtonModule,\n        TranslationsModule,\n        MatSliderModule,\n        MatAutocompleteModule,\n        DragDropModule,\n    ],\n    providers: [\n        {\n            provide: APPEARANCE_EDITOR_CONFIG,\n            useValue: APP_APPEARANCE_CONFIG,\n            multi: true,\n        }\n    ]\n})\nexport class AppAppearanceModule {\n}\n","import {HomepageAppearancePanelComponent} from './homepage-appearance-panel/homepage-appearance-panel.component';\r\n\r\nexport const APP_APPEARANCE_CONFIG = {\r\n    defaultRoute: '/',\r\n    navigationRoutes: [\r\n        '/',\r\n        'artist',\r\n        'album',\r\n        'track',\r\n        'playlist',\r\n        'genre',\r\n        'user',\r\n        'account',\r\n        'login',\r\n        'register',\r\n    ],\r\n    menus: {\r\n        availableRoutes: [\r\n            'admin/upload',\r\n            'upload',\r\n            'library/songs',\r\n            'library/albums',\r\n            'library/artists',\r\n            'library/history',\r\n        ],\r\n        positions: [\r\n            'sidebar-primary',\r\n            'sidebar-secondary',\r\n            'mobile-bottom',\r\n            'landing-page-navbar',\r\n            'landing-page-footer',\r\n            'custom-page-navbar',\r\n            'admin-navbar',\r\n        ],\r\n    },\r\n    sections: [\r\n        {\r\n            name: 'landing page',\r\n            component: HomepageAppearancePanelComponent,\r\n            position: 1,\r\n        }\r\n    ]\r\n};\r\n","/**\r\n * Sort array based on another array.\r\n */\r\nexport function mapOrder(array: any[], order: any[], key: string) {\r\n    if ( ! array) return array;\r\n    array.sort((a, b) => {\r\n        const A = a[key], B = b[key];\r\n\r\n        if (order.indexOf(A) > order.indexOf(B)) {\r\n            return 1;\r\n        } else {\r\n            return -1;\r\n        }\r\n    });\r\n\r\n    return array;\r\n}\r\n"]}